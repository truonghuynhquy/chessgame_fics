<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SrcChess2</name>
    </assembly>
    <members>
        <member name="T:SrcChess2.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:SrcChess2.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:SrcChess2.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:SrcChess2.BoardEvaluationBasic">
            <summary>Basic board evaluation function</summary>
        </member>
        <member name="F:SrcChess2.BoardEvaluationBasic.s_piPiecePoint">
            <summary>Value of each piece/color.</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationBasic.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:SrcChess2.BoardEvaluationBasic.Name">
            <summary>
            Name of the evaluation method
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationBasic.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white move - Number of possible black move</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="T:SrcChess2.BoardEvaluationTest">
            <summary>Test board evaluation function</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationTest.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:SrcChess2.BoardEvaluationTest.Name">
            <summary>
            Name of the evaluation method
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationTest.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white move - Number of possible black move</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="T:SrcChess2.BoardEvaluationUtil">
            <summary>Utility class creating and holding all board evaluator functions</summary>
        </member>
        <member name="F:SrcChess2.BoardEvaluationUtil.m_listBoardEvaluator">
            <summary>List of all board evaluator object</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.BuildBoardEvaluationList">
            <summary>
            Creates all build evaluator objects using reflection to find them
            </summary>
        </member>
        <member name="P:SrcChess2.BoardEvaluationUtil.BoardEvaluators">
            <summary>
            Returns the list of board evaluators
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.FindBoardEvaluator(System.String)">
            <summary>
            Find a board evaluator using its name
            </summary>
            <param name="strName">  Evaluation method name</param>
            <returns>
            Object
            </returns>
        </member>
        <member name="T:SrcChess2.BoardEvaluationWeak">
            <summary>Board evaluation function used for beginner</summary>
        </member>
        <member name="F:SrcChess2.BoardEvaluationWeak.s_piPiecePoint">
            <summary>Value of each piece/color.</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationWeak.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:SrcChess2.BoardEvaluationWeak.Name">
            <summary>
            Name of the evaluation method
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationWeak.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white move - Number of possible black move</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="T:SrcChess2.ChessBoardControl">
            <summary>
            Defines a Chess Board Control
            </summary>
            <summary>
            ChessBoardControl
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.IntPoint">
            <summary>
            Integer Point
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IntPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Class Ctor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.IntPoint.X">
            <summary>X point</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.IntPoint.Y">
            <summary>Y point</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.NewMoveEventArgs">
            <summary>
            Arguments for the Reset event
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.NewMoveEventArgs.#ctor(SrcChess2.MoveExt,SrcChess2.ChessBoard.GameResultE)">
            <summary>
            Ctor
            </summary>
            <param name="move">                 Move</param>
            <param name="eMoveResult">          Move result</param>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.NewMoveEventArgs.Move">
            <summary>
            Move which has been done
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.NewMoveEventArgs.MoveResult">
            <summary>
            Move result
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.IUpdateCmd">
            <summary>
            Interface implemented by the UI which show the lost pieces.
            This interface is called each time the chess board need an update on the lost pieces UI.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IUpdateCmd.Update">
            <summary>Update the lost pieces</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.SyncFlash">
            <summary>
            Show a piece moving from starting to ending point
            </summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_chessBoardControl">
            <summary>Chess Board Control</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_brush">
            <summary>Solid Color Brush to flash</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_colorStart">
            <summary>First Flash Color</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_colorEnd">
            <summary>Second Flash Color</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_dispatcherFrame">
            <summary>Dispatcher Frame. Wait for flash</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.#ctor(SrcChess2.ChessBoardControl,System.Windows.Media.SolidColorBrush,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Class Ctor
            </summary>
            <param name="chessBoardControl">    Chess Board Control</param>
            <param name="brush">                Solid Color Brush to flash</param>
            <param name="colorStart">           First flashing color</param>
            <param name="colorEnd">             Second flashing color</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.FlashCell(System.Int32,System.Double,System.EventHandler)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="iCount">                   Flash count</param>
            <param name="dSec">                     Flash duration</param>
            <param name="eventHandlerTerminated">   Event handler to call when flash is finished</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.Flash">
            <summary>
            Show the move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.FirstFlash_Completed(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.MoveSelectedEventArgs">
            <summary>Event argument for the MoveSelected event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.MoveSelectedEventArgs.Move">
            <summary>Move position</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.MoveSelectedEventArgs.#ctor(SrcChess2.MoveExt)">
            <summary>
            Constructor
            </summary>
            <param name="move">     Move position</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPieceEventArgs">
            <summary>Event argument for the QueryPiece event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPieceEventArgs.Pos">
            <summary>Position of the square</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPieceEventArgs.Piece">
            <summary>Piece</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.QueryPieceEventArgs.#ctor(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Constructor
            </summary>
            <param name="iPos">     Position of the square</param>
            <param name="ePiece">   Piece</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs">
            <summary>Event argument for the QueryPawnPromotionType event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.PawnPromotionType">
            <summary>Promotion type (Queen, Rook, Bishop, Knight or Pawn)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.ValidPawnPromotion">
            <summary>Possible pawn promotions in the current context</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.#ctor(SrcChess2.ChessBoard.ValidPawnPromotionE)">
            <summary>
            Constructor
            </summary>
            <param name="eValidPawnPromotion">  Possible pawn promotions in the current context</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.FindBestMoveCookie`1">
            <summary>Cookie for FindBestMove method</summary>
            <typeparam name="T">Original cookie type</typeparam>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.LiteCellColorProperty">
            <summary>Lite Cell Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.DarkCellColorProperty">
            <summary>Dark Cell Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.WhitePieceColorProperty">
            <summary>White Pieces Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.BlackPieceColorProperty">
            <summary>Black Pieces Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.MoveFlashingProperty">
            <summary>Determine if a move is flashing</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.MoveSelected">
            <summary>Called when a user select a valid move to be done</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.BoardReset">
            <summary>Triggered when the board is being reset</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.NewMove">
            <summary>Called when a new move has been done</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.RedoPosChanged">
            <summary>Called when the redo position has been changed</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPieceEventHandler">
            <summary>Delegate for the QueryPiece event</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.QueryPiece">
            <summary>Called when chess control in design mode need to know which piece to insert in the board</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventHandler">
            <summary>Delegate for the QueryPawnPromotionType event</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.QueryPawnPromotionType">
            <summary>Called when chess control needs to know which type of pawn promotion must be done</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.UpdateCmdState">
            <summary>Called to refreshed the command state (menu, toolbar etc.)</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.FindMoveBegin">
            <summary>Triggered when find move begin</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.FindMoveEnd">
            <summary>Triggered when find move end</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_strCtlIsBusy">
            <summary>Message for Control is busy exception</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_pieceSet">
            <summary>Piece Set to use</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_board">
            <summary>Board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_arrBorder">
            <summary>Array of frames containing the chess piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_arrPiece">
            <summary>Array containing the current piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_bWhiteInBottom">
            <summary>true to have white in the bottom of the screen, false to have black</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_ptSelectedCell">
            <summary>Currently selected cell</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_gameTimer">
            <summary>Timer for both player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_iBusy">
            <summary>Not zero when board is flashing and reentrance can be a problem</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_signalActionDone">
            <summary>Signal that a move has been completed</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.#cctor">
            <summary>
            Static Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetSchema">
            <summary>
            Returns the XML schema if any
            </summary>
            <returns>
            null
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialized the control from a XML reader
            </summary>
            <param name="reader">   Reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize the control into a XML writer
            </summary>
            <param name="writer">   XML writer</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshBoardColor">
            <summary>
            Refresh the board color
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.InitCell">
            <summary>
            Initialize the cell
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetPieceControl(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the chess piece control
            </summary>
            <param name="iBoardPos">    Board position</param>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshCell(System.Int32,System.Boolean)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="iBoardPos">    Board position</param>
            <param name="bFullRefresh"> true to refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshCell(System.Int32)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="iBoardPos">    Board position</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.Refresh(System.Boolean)">
            <summary>
            Refresh the board
            </summary>
            <param name="bFullRefresh"> Refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.Refresh">
            <summary>
            Refresh the board
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ResetBoard">
            <summary>
            Reset the board to the initial condition
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ColorInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Image property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.SearchMode">
            <summary>
            Return the search mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsDirty">
            <summary>
            Return true if board control has been changed
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.LiteCellColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.DarkCellColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePieceColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPieceColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.MoveFlashing">
            <summary>
            Determine if a move is flashing
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.PieceSet">
            <summary>
            Current piece set
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.Board">
            <summary>
            Current chess board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.SignalActionDone">
            <summary>
            Signal used to determine if the called action has been done
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePlayerName">
            <summary>
            Name of the player playing white piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPlayerName">
            <summary>
            Name of the player playing black piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePlayerType">
            <summary>
            Type of player playing white piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPlayerType">
            <summary>
            Type of player playing black piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.ChessBoard">
            <summary>
            Gets the chess board associated with the control
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhiteInBottom">
            <summary>
            Determine if the White are in the top or bottom of the draw board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.AutoSelection">
            <summary>
            Enable or disable the auto selection mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BoardDesignMode">
            <summary>
            Determine the board design mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.UndoCount">
            <summary>
            Gets the number of move which can be undone
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.RedoCount">
            <summary>
            Gets the number of move which can be redone
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.NextMoveColor">
            <summary>
            Current color to play
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.MoveList">
            <summary>
            List of played moves
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.GameTimer">
            <summary>
            Game timer
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.SelectedCell">
            <summary>
            Currently selected case
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsCellSelected">
            <summary>
            true if a cell is selected
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsBusy">
            <summary>
            Return true if board is flashing and we must not let the control be reentered
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsObservingAGame">
            <summary>
            Return true if we're observing a game from a chess server
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsSearchEngineBusy">
            <summary>
            Returns if the search engine is busy
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsSearchCancel">
            <summary>
            Returns if the running search for best move has been canceled
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnFindMoveBegin(System.EventArgs)">
            <summary>
            Trigger the FindMoveBegin event.
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnFindMoveEnd(System.EventArgs)">
            <summary>
            Trigger the FindMoveEnd event.
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnUpdateCmdState(System.EventArgs)">
            <summary>
            Trigger the UpdateCmdState event. Called when command state need to be reevaluated.
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnBoardReset(System.EventArgs)">
            <summary>
            Trigger the BoardReset event
            </summary>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnRedoPosChanged(System.EventArgs)">
            <summary>
            Trigger the RedoPosChanged event
            </summary>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnNewMove(SrcChess2.ChessBoardControl.NewMoveEventArgs)">
            <summary>
            Trigger the NewMove event
            </summary>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnMoveSelected(SrcChess2.ChessBoardControl.MoveSelectedEventArgs)">
            <summary>
            Trigger the MoveSelected event
            </summary>
            <param name="e">    Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnQueryPiece(SrcChess2.ChessBoardControl.QueryPieceEventArgs)">
            <summary>
            OnQueryPiece:       Trigger the QueryPiece event
            </summary>
            <param name="e">    Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnQueryPawnPromotionType(SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs)">
            <summary>
            OnQweryPawnPromotionType:   Trigger the QueryPawnPromotionType event
            </summary>
            <param name="e">            Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowError(System.String)">
            <summary>
            Show an error message
            </summary>
            <param name="strError"> Error message</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowMessage(System.String)">
            <summary>
            Show a message
            </summary>
            <param name="strMsg">   Message</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetCellSelectionState(SrcChess2.ChessBoardControl.IntPoint,System.Boolean)">
            <summary>
            Set the cell selection  appearance
            </summary>
            <param name="ptCell"></param>
            <param name="bSelected"></param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveGame(System.IO.BinaryWriter)">
            <summary>
            Save the current game into a file
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.InitAfterLoad(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Initialize the board control after a board has been loaded
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.LoadGame(System.IO.BinaryReader)">
            <summary>
            Load a game from a stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.TakeSnapshot">
            <summary>
            Save the board content into a snapshot string.
            </summary>
            <returns>
            Snapshot
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RestoreSnapshot(System.String)">
            <summary>
            Restore the snapshot
            </summary>
            <param name="strSnapshot">  Snapshot</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.LoadFromFile">
            <summary>
            Load a board from a file selected by the user.
            </summary>
            <returns>
            true if a new board has been read
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveToFile">
            <summary>
            Save a board to a file selected by the user
            </summary>
            <returns>
            true if the game has been saved
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SavePGNToFile">
            <summary>
            Save the board to a file selected by the user in PGN format
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveSnapshot">
            <summary>
            Save the board to a file selected by the user in PGN format
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.MoveExt},SrcChess2.ChessBoard.PlayerE,System.String,System.String,SrcChess2.PlayerTypeE,SrcChess2.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eNextMoveColor">       Color starting to play</param>
            <param name="strWhitePlayerName">   Name of the player playing white pieces</param>
            <param name="strBlackPlayerName">   Name of the player playing black pieces</param>
            <param name="eWhitePlayerType">     Type of player playing white pieces</param>
            <param name="eBlackPlayerType">     Type of player playing black pieces</param>
            <param name="spanPlayerWhite">      Timer for white</param>
            <param name="spanPlayerBlack">      Timer for black</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateFromPGNText">
            <summary>
            Creates a game from a PGN text paste by the user
            </summary>
            <returns>
            true if a new board has been loaded
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveGameToPGNText(System.Boolean)">
            <summary>
            Creates a game from a PGN text paste by the user
            </summary>
            <returns>
            true if a new board has been loaded
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateBookFromFiles">
            <summary>
            Create a book from files selected by the user
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetCaseValue(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the piece in a case. Can only be used in design mode.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FindBookMove(SrcChess2.Book,SrcChess2.Move@)">
            <summary>
            Find a move from the opening book
            </summary>
            <param name="book"> Book</param>
            <param name="move"> Found move</param>
            <returns>
            true if succeed, false if no move found in book
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FindBestMoveEnd``1(SrcChess2.ChessBoardControl.FindBestMoveCookie{``0},SrcChess2.MoveExt)">
            <summary>
            Call back the original action after update the move time counter
            </summary>
            <typeparam name="T">            Type of the original cookie</typeparam>
            <param name="cookieCallBack">   Call back cookie</param>
            <param name="move">             Found move</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FindBestMove``1(SrcChess2.ChessBoard,System.Action{``0,SrcChess2.MoveExt},``0,SrcChess2.PlayerTypeE)">
            <summary>
            Find the best move for a player using alpha-beta pruning or minmax search
            </summary>
            <param name="chessBoard">       Chess board to use. Null to use the base one</param>
            <param name="actionMoveFound">  Action to do with the move found</param>
            <param name="cookie">           Cookie to pass to the action</param>
            <param name="ePlayerType">      Player type (human or computer)</param>
            <returns>
            true if succeed, false if thread is busy
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowHintEnd(SrcChess2.ChessBoardControl.FindBestMoveCookie{System.Boolean},SrcChess2.MoveExt)">
            <summary>
            Called when the best move routine is done
            </summary>
            <param name="cookieCallBack">   Call back cookie</param>
            <param name="move">             Found move</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowHint(System.Action{System.Boolean,SrcChess2.MoveExt})">
            <summary>
            Show a hint
            </summary>
            <param name="actionHintFound">  Action to do with the hint is found</param>
            <returns>
            true if search has started, false if search engine is busy
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CancelSearch">
            <summary>
            Cancel search
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerE,SrcChess2.Move,System.Int32)">
            <summary>
            Search trace
            </summary>
            <param name="iDepth">       Search depth</param>
            <param name="ePlayerColor"> Color who play</param>
            <param name="movePos">      Move position</param>
            <param name="iPts">         Points</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetHumanPos(SrcChess2.ChessBoardControl.IntPoint,SrcChess2.ChessBoardControl.IntPoint)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="ptStart">      Starting Position</param>
            <param name="ptEnd">        Ending position</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetCellFromPoint(System.Windows.Input.MouseEventArgs,SrcChess2.ChessBoardControl.IntPoint@)">
            <summary>
            Gets the cell position from a mouse event
            </summary>
            <param name="e">        Mouse event argument</param>
            <param name="ptCell">   Resulting cell</param>
            <returns>
            true if succeed, false if mouse don't point to a cell
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FlashCell(SrcChess2.ChessBoardControl.IntPoint)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="ptCell">   Cell to flash</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FlashCell(System.Int32)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="iStartPos">    Cell position</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetPosToUpdate(SrcChess2.Move)">
            <summary>
            Get additional position to update when doing or undoing a special move
            </summary>
            <param name="movePos">  Position of the move</param>
            <returns>
            Array of position to undo
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowBeforeMove(SrcChess2.MoveExt,System.Boolean)">
            <summary>
            Show before move is done
            </summary>
            <param name="movePos">      Position of the move</param>
            <param name="bFlash">       true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowAfterMove(SrcChess2.MoveExt,System.Boolean)">
            <summary>
            Show after move is done
            </summary>
            <param name="movePos">      Position of the move</param>
            <param name="bFlash">       true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.DoMove(SrcChess2.MoveExt,System.Boolean)">
            <summary>
            Play the specified move
            </summary>
            <param name="move">         Position of the move</param>
            <param name="bFlashing">    true to flash when doing the move</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Tie, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.DoMove(SrcChess2.MoveExt)">
            <summary>
            Play the specified move
            </summary>
            <param name="move">         Position of the move</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Tie, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.DoUserMove(SrcChess2.MoveExt)">
            <summary>
            Play the specified move
            </summary>
            <param name="move">         Position of the move</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Tie, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.UndoMove(System.Boolean,System.Boolean)">
            <summary>
            Undo the last move
            </summary>
            <param name="bPlayerAgainstPlayer"> true if player against player</param>
            <param name="bFlashing">            true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.UndoMove(System.Boolean,SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Undo the last move
            </summary>
            <param name="bPlayerAgainstPlayer"> true if player against player</param>
            <param name="eComputer">            Color played by the computer if any</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RedoMove(System.Boolean,System.Boolean)">
            <summary>
            Redo the most recently undone move
            </summary>
            <param name="bPlayerAgainstPlayer"> true if player against player</param>
            <param name="bFlashing">            true to flash while doing the move</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RedoMove(System.Boolean)">
            <summary>
            Redo the most recently undone move
            </summary>
            <param name="bPlayerAgainstPlayer"> true if player against player</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SelectMove(System.Int32,System.Boolean@)">
            <summary>
            Select a move by index using undo/redo buffer to move
            </summary>
            <param name="iIndex">   Index of the move. Can be -1</param>
            <param name="bSucceed"> true if index in range</param>
            <returns>
            Repeat result
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Intercept Mouse click
            </summary>
            <param name="e">    Event Parameter</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ChessToolBar">
            <summary>
            Toolbar for the Chess Program
            </summary>
            <summary>
            ChessToolBar
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.StartProgressBar">
            <summary>
            Start the progress bar
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.EndProgressBar">
            <summary>
            Stop the progress bar
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ToolBarButton">
            <summary>
            Defines a toolbar button
            </summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.ImageProperty">
            <summary>Image dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisabledImageProperty">
            <summary>Image Disabled dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.FlipProperty">
            <summary>Flip dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.TextProperty">
            <summary>Image dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleProperty">
            <summary>DisplayStyle dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.m_imageCtrl">
            <summary>Inner Image control</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.m_textCtrl">
            <summary>Inner Text control</summary>
        </member>
        <member name="T:SrcChess2.ToolBarButton.DisplayStyleE">
            <summary>Display Style applied to the Toolbarbutton</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.Image">
            <summary>Image only displayed</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.Text">
            <summary>Text only displayed</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.ImageAndText">
            <summary>Image and Text displayed</summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.#cctor">
            <summary>
            Class ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.ImageChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Image property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Image">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.DisabledImageChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Disabled Image property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.DisabledImage">
            <summary>
            Disabled Image displayed to the button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.FlipChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Flip property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Flip">
            <summary>
            Flip the image horizontally
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.TextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Text property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Text">
            <summary>
            Text displayed in button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.DisplayStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DisplayStyle property changed
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.DisplayStyle">
            <summary>
            Display Style applied to the button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.SetDisplayStyle(System.Windows.DependencyObject,SrcChess2.ToolBarButton.DisplayStyleE)">
            <summary>
            Set the Display Style
            </summary>
            <param name="element">      Dependency element</param>
            <param name="eDisplayStyle">Display Style</param>
        </member>
        <member name="M:SrcChess2.ToolBarButton.GetDisplayStyle(System.Windows.DependencyObject)">
            <summary>
            Get the full name of the field attached to a column
            </summary>
            <param name="element">  Dependency element</param>
            <returns>
            Field full name
            </returns>
        </member>
        <member name="M:SrcChess2.ToolBarButton.IsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsEnabled property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.SetImage(System.Boolean)">
            <summary>
            Set the source image depending the enabled state
            </summary>
            <param name="bFlip">    true if flipped</param>
        </member>
        <member name="M:SrcChess2.ToolBarButton.BuildInnerButton">
            <summary>
            Builds the inner controls to make the button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.UpdateInnerButton">
            <summary>
            Updates the inner controls of the button
            </summary>
        </member>
        <member name="T:SrcChess2.CircularProgressBar">
            <summary>
            A circular type progress bar, that is simliar to popular web based progress bars
            Modified version of WPF Circular Progress Bar from Sacha Barber
            </summary>
            <summary>
            CircularProgressBar
            </summary>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:SrcChess2.CircularProgressBar.SpeedInMS">
            <summary>
            Animation speed in ms
            </summary>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.Start">
            <summary>
            Start the animation
            </summary>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.Stop">
            <summary>
            Stopping the animation
            </summary>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.HandleAnimationTick(System.Object,System.EventArgs)">
            <summary>
            Call for each tick
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.HandleLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when control is loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.SetPosition(System.Windows.Shapes.Ellipse,System.Double,System.Double,System.Double)">
            <summary>
            Set the dot position
            </summary>
            <param name="ellipse">  Ellipse</param>
            <param name="offset">   Offset</param>
            <param name="posOffSet">Position offset</param>
            <param name="step">     Step</param>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.HandleUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when control is unloaded
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.CircularProgressBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSConnectionSetting">
            <summary>
            FICS Connection setting
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnectionSetting.HostName">
            <summary>FICS Server Host Name</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnectionSetting.HostPort">
            <summary>FICS Server Host port</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnectionSetting.Anonymous">
            <summary>true for anonymous, false for rated</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnectionSetting.UserName">
            <summary>User name</summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSTester">
            <summary>
            Test FICS interface
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSTester.GameIntfTest">
            <summary>
            Testing version of the game interface
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSTester.GameIntfTest.m_streamLog">
            <summary>Stream use to log error and message</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.GameIntfTest.#ctor(SrcChess2.FICSInterface.FICSGame,SrcChess2.ChessBoardControl,System.IO.StreamWriter,System.Threading.EventWaitHandle,System.Int32,System.Action{SrcChess2.FICSInterface.GameIntf})">
            <summary>
            Ctor
            </summary>
            <param name="game">                 Game</param>
            <param name="chessBoardControl">    Chess board control if any</param>
            <param name="streamLog">            Stream where to send the log information</param>
            <param name="eventWaitHandle">      Use to inform background tester the game is terminated</param>
            <param name="iMoveTimeOut">         Move timeout in second</param>
            <param name="actionMoveTimeOut">    Action to call if move timeout</param>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSTester.GameIntfTest.EventWaitHandle">
            <summary>
            Use to inform background runner the game is terminating
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.GameIntfTest.ShowError(System.String)">
            <summary>
            Send an error message to the log file
            </summary>
            <param name="strError"> Error message</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.GameIntfTest.ShowMessage(System.String)">
            <summary>
            Send a message to the log file
            </summary>
            <param name="strMsg">   Message</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.GameIntfTest.SetTermination(SrcChess2.FICSInterface.TerminationE,System.String,System.String)">
            <summary>
            Set the termination code and the error if any
            </summary>
            <param name="eTermination">             Termination code</param>
            <param name="strTerminationComment">    Termination comment</param>
            <param name="strError">                 Error</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.LogWrite(System.IO.StreamWriter,System.String)">
            <summary>
            Write a message to a log and to the debugger output
            </summary>
            <param name="writer">   Writer</param>
            <param name="strMsg">   Message</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.BackgroundGame(SrcChess2.FICSInterface.FICSConnection,SrcChess2.ChessBoardControl)">
            <summary>
            Start a background game
            </summary>
            <param name="conn">         Connection to FICS server</param>
            <param name="chessBoardCtl">Chess board control</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSTester.StartBackgroundGame(SrcChess2.FICSInterface.FICSConnection,SrcChess2.ChessBoardControl)">
            <summary>
            Start a background game
            </summary>
            <param name="conn">         Connection with FICS server</param>
            <param name="chessBoardCtl">Chess board control use to display the games</param>
        </member>
        <member name="T:SrcChess2.FICSInterface.frmConnectToFICS">
            <summary>
            Interaction logic for frmConnectToFICS.xaml
            </summary>
            <summary>
            frmConnectToFICS
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.frmConnectToFICS.m_ctlMain">
            <summary>Main chess control</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.frmConnectToFICS.m_conn">
            <summary>Connection to the chess server</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.#ctor(SrcChess2.ChessBoardControl,SrcChess2.FICSInterface.FICSConnectionSetting)">
            <summary>
            Ctor
            </summary>
            <param name="connectionSetting">    Connection setting</param>
            <param name="ctlMain">              Main chessboard control</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.ConnectionSetting">
            <summary>
            Setting for connecting to the FICS server
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.HostName">
            <summary>
            Server Host Name
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.PortNumber">
            <summary>
            Host port number
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.EnableLoginInfo(System.Boolean)">
            <summary>
            Enable/disable the login info
            </summary>
            <param name="bEnable"></param>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.IsAnonymous">
            <summary>
            Return if the connection use an anonymous login
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.UserName">
            <summary>
            Gets the user name
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmConnectToFICS.Connection">
            <summary>
            Connection to the FICS Chess Server
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.UpdateButtonState">
            <summary>
            Update the state of the OK button
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.textBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when a textbox content change
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.textBoxPassword_PasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a password content change
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.radio_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when Radio button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.ConnectionDone(System.Boolean,SrcChess2.FICSInterface.FICSConnection,System.String)">
            <summary>
            Called when connection has succeed or failed
            </summary>
            <param name="bSucceed"> true if succeed</param>
            <param name="conn">     Connection if any</param>
            <param name="strError"> Error if any</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.InitializeConnection(System.String,System.Int32,System.String,System.String)">
            <summary>
            Try to connect to the server
            </summary>
            <param name="strHostName">  Host name</param>
            <param name="iPortNumber">  Port number</param>
            <param name="strUserName">  User name</param>
            <param name="strPassword">  Password</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a Ok button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.butCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when Cancel button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmConnectToFICS.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.frmFindBlitzGame">
            <summary>
            Interaction logic for frmFindBlitzGame.xaml
            </summary>
            <summary>
            frmFindBlitzGame
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.frmFindBlitzGame.m_conn">
            <summary>Connection to the server</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.frmFindBlitzGame.m_searchCriteria">
            <summary>Actual search criteria</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.#ctor(SrcChess2.FICSInterface.FICSConnection,SrcChess2.FICSInterface.SearchCriteria)">
            <summary>
            Ctor
            </summary>
            <param name="conn">             FICS Connection</param>
            <param name="searchCriteria">   Search criteria</param>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.Game">
            <summary>
            Game selected
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.SearchCriteria">
            <summary>
            Search criteria used to find the game
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.PlayerName">
            <summary>
            Player name
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.BlitzGame">
            <summary>
            true to allow blitz
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.LightningGame">
            <summary>
            true to allow lightning
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.UntimedGame">
            <summary>
            true to allow untimed game
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.StandardGame">
            <summary>
            true to allow standard game
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.IsRated">
            <summary>
            true to force only rated player
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MinRating">
            <summary>
            Minimum player rating
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MinTimePerPlayer">
            <summary>
            Minimum player time
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MaxTimePerPlayer">
            <summary>
            Maximum player time
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MinIncTimePerMove">
            <summary>
            Minimum move increment time
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MaxIncTimePerMove">
            <summary>
            Maximum move increment time
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MaxMoveDone">
            <summary>
            Maximum move done
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.frmFindBlitzGame.MoveTimeout">
            <summary>
            Move timeout in seconds
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.CreateCriteria">
            <summary>
            Update the search criteria
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.UpdateState">
            <summary>
            Update the state
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.textBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when a text box has changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.check_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a check box has changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a text box has changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.butCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a text box has changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.frmFindBlitzGame.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.GameIntf">
            <summary>
            Interface between a Chess Server and a chess control board
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.GameIntf.Game">
            <summary>Game being observed</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.GameIntf.ChessBoardCtl">
            <summary>Chess board control</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.GameIntf.BoardCreated">
            <summary>true if board has already been created (move list has been received)</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.GameIntf.Termination">
            <summary>Termination code</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.GameIntf.TerminationError">
            <summary>Termination error</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_queueMove">
            <summary>List of moves received before the game was created</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_chessBoard">
            <summary>Board used to convert move</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_parser">
            <summary>PGN parser</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_pgnGame">
            <summary>PGN game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_spanTotalWhiteTime">
            <summary>Total time used by white player</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_spanTotalBlackTime">
            <summary>Total time used by black player</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_listInitialMoves">
            <summary>List of initial moves</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_timerMoveTimeout">
            <summary>Timer to handle move time out if any</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_iMoveTimeOut">
            <summary>Move time out in seconds</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_spanOriginalMaxTime">
            <summary>Original maximum time allowed to both player</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.GameIntf.m_actionGameFinished">
            <summary>Action to call when the game is terminating</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.#ctor(SrcChess2.FICSInterface.FICSGame,SrcChess2.ChessBoardControl,System.Nullable{System.Int32},System.Action{SrcChess2.FICSInterface.GameIntf},System.Action{SrcChess2.FICSInterface.GameIntf,SrcChess2.FICSInterface.TerminationE,System.String})">
            <summary>
            Ctor
            </summary>
            <param name="game">                 FICS Game</param>
            <param name="chessBoardCtl">        Chess board control</param>
            <param name="iMoveTimeout">         Move timeout in second</param>
            <param name="actionMoveTimeOut">    Action to call if move timeout</param>
            <param name="actionGameFinished">   Action to do when game is finished</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.TimerCallback(System.Object)">
            <summary>
            Called when a timeout occurs
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.ShowMessage(System.String)">
            <summary>
            Send a message to the chess board control
            </summary>
            <param name="strMsg">   Message string</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.ShowError(System.String)">
            <summary>
            Send an error to the chess board control
            </summary>
            <param name="strError"> Error string</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.SetTermination(SrcChess2.FICSInterface.TerminationE,System.String,System.String)">
            <summary>
            Set the termination code and the error if any
            </summary>
            <param name="eTermination">             Termination code</param>
            <param name="strTerminationComment">    Termination comment</param>
            <param name="strError">                 Error</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.SetBoardControl">
            <summary>
            Set the board content
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.DoMove(SrcChess2.MoveExt)">
            <summary>
            Do a move
            </summary>
            <param name="move"> Move to be done</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.PlayMove(SrcChess2.FICSInterface.Style12MoveLine,System.Boolean,System.String@)">
            <summary>
            Play a decoded move
            </summary>
            <param name="moveLine">     Move line</param>
            <param name="bShowError">   True to send the error to the chess board control</param>
            <param name="strError">     Error if any</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.PlayMove(SrcChess2.FICSInterface.Style12MoveLine)">
            <summary>
            Play a decoded move
            </summary>
            <param name="moveLine">     Move line</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.GetPGNGame(SrcChess2.ChessBoard,System.TimeSpan,System.TimeSpan)">
            <summary>
            Convert the board to a PGN game
            </summary>
            <param name="chessBoard">   Chess board</param>
            <param name="spanWhite">    Time played by white</param>
            <param name="spanBlack">    Time played by black</param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.GetPGNGame">
            <summary>
            Gets the game in PGN format
            </summary>
            <returns>
            PGN formatted string
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.ParseInitialMove(System.String,System.String@)">
            <summary>
            Parse the initial move
            </summary>
            <param name="strLine">  Line to parse</param>
            <param name="strError"> Returned error if any</param>
            <returns>
            true if succeed, false if error, null if all starting moves has been found
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.GameIntf.CreateInitialBoard(System.String@)">
            <summary>
            Create the initial board
            </summary>
            <returns>
            true if succeed, false if error, null if all starting moves has been found
            </returns>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSConnection">
            <summary>
            Interface with FICS (Free Chess Interface Server)
            </summary>
            <remarks>
            Implements playing game with a human through FICS
            Implements chat?
            </remarks>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE">
            <summary>Current command executing</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.None">
            <summary>No command executing</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.PreLogin">
            <summary>Before login to the server</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.Login">
            <summary>Login to the server</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.MoveList">
            <summary>Getting a game move list</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.GameList">
            <summary>Getting the list of games</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.Date">
            <summary>Get the date from the server</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.CmdExecutingE.VariableList">
            <summary>List of variables values</summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSConnection.AutomatonState">
            <summary>
            State of the listening automaton
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.CmdExecuting">
            <summary>Command being executed</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.Phase">
            <summary>Execution phase. 0 for awaiting first part</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.SingleMoveListening">
            <summary>true if listening to single move of at least one game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.AutomatonState.TimeStarted">
            <summary>Time at which the command started to be processed</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.CurrentGameIntf">
            <summary>Game for which the command is being executed if any</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.LastCmdError">
            <summary>Last command error if any</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.AutomatonState.m_dictGameIntf">
            <summary>List of active games</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.GameList">
            <summary>List of games from the last 'games' command</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.ServerDateList">
            <summary>Server date list</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.VariableList">
            <summary>List of variable settings</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.AutomatonState.CmdSignal">
            <summary>Signal use to indicate when a command finished executing</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.UserName">
            <summary>User name</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.Password">
            <summary>Password</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.AutomatonState.LoginText">
            <summary>Text received in the login process</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.Dispose">
            <summary>
            Disposing the object
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.AddGameIntf(SrcChess2.FICSInterface.GameIntf)">
            <summary>
            Add a game interface
            </summary>
            <param name="gameIntf"> Game interface</param>
            <returns>
            true if succeed, false if game is already defined
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.RemoveGameIntfInt(System.Int32)">
            <summary>
            Remove a game interface
            </summary>
            <param name="iGameId">  Game interface id</param>
            <returns>
            true if succeed, false if game is not found
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.RemoveGameIntf(System.Int32)">
            <summary>
            Remove a game interface
            </summary>
            <param name="iGameId">  Game id</param>
            <returns>
            true if succeed, false if game is not found
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.TerminateGame(SrcChess2.FICSInterface.GameIntf,SrcChess2.FICSInterface.TerminationE,System.String,System.String)">
            <summary>
            Terminate a game
            </summary>
            <param name="gameIntf">                 Game interface</param>
            <param name="eTermination">             Termination code</param>
            <param name="strTerminationComment">    Termination comment</param>
            <param name="strError">                 Error if any</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.FindGameIntf(System.Int32)">
            <summary>
            Find a game using its id
            </summary>
            <param name="iGameId">  Game id</param>
            <returns>
            Game or null if not found
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.FindGameIntf(SrcChess2.ChessBoardControl)">
            <summary>
            Find a game using its attached chess board control
            </summary>
            <param name="chessBoardControl">  Chess board control</param>
            <returns>
            Game or null if not found
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.GameCount">
            <summary>
            Gets the number of observed games
            </summary>
            <returns>
            Game count
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.SetCommand(SrcChess2.FICSInterface.FICSConnection.CmdExecutingE,SrcChess2.FICSInterface.GameIntf)">
            <summary>
            Set the current command or reset it to none
            </summary>
            <param name="eCmd">     Command</param>
            <param name="gameIntf"> Associated game interface if any</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.ResetCommand(System.String)">
            <summary>
            Reset the current command to none
            </summary>
            <param name="strError"> Error message</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.AutomatonState.ResetCommand">
            <summary>
            Reset the current command to none
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.m_connection">
            <summary>TELNET Connection with the server</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.m_state">
            <summary>State of the listening routine</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.m_dictVariables">
            <summary>Original parameter values</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.m_setChangedSettings">
            <summary>Set of setting which has been changed</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSConnection.m_ctlMain">
            <summary>Window where to send some error message</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.#ctor(SrcChess2.ChessBoardControl,System.String,System.Int32,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="ctlMain">      Main chess board control</param>
            <param name="strHostname">  Host name</param>
            <param name="iPort">        Port number</param>
            <param name="bDebugTrace">  true to send trace to the debugging output</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.#ctor(SrcChess2.ChessBoardControl,SrcChess2.FICSInterface.FICSConnectionSetting)">
            <summary>
            Ctor
            </summary>
            <param name="ctlMain">              Main chess board control</param>
            <param name="connectionSetting">    Connection setting</param>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.DebugTrace">
            <summary>
            Debugging trace
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.Dispose(System.Boolean)">
            <summary>
            Disposing the object
            </summary>
            <param name="bDisposing">   true for dispose, false for finallizing</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.Dispose">
            <summary>
            Dispose the connection to the FICS server
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.ConnectionSetting">
            <summary>
            Connection setting
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GetObservedGameCount">
            <summary>
            Gets the number of games which are observed
            </summary>
            <returns>
            Observed games count
            </returns>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSConnection.OriginalSettings">
            <summary>
            Original settings
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Change a server setting
            </summary>
            <param name="strSetting">   Name of the setting</param>
            <param name="strValue">     Value of the setting</param>
            <param name="bAddToSet">    true to add to the list of change setting</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.SetISetting(System.String,System.String)">
            <summary>
            Change a server setting (iVariable)
            </summary>
            <param name="strSetting">   Name of the setting</param>
            <param name="strValue">     Value of the setting</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.RestoreOldSetting">
            <summary>
            Restore the old settings
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.SetQuietModeInt">
            <summary>
            Set a quiet mode
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.SetQuietMode">
            <summary>
            Set a quiet mode
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.Login(System.String,System.Int32,System.String@)">
            <summary>
            Login to the session
            </summary>
            <param name="strPassword">      User password</param>
            <param name="iTimeOut">         Timeout in seconds</param>
            <param name="strError">         Returned error if any</param>
            <returns>
            true if succeed, false if failed (bad password)
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ObserveGame(SrcChess2.FICSInterface.GameIntf,System.Int32,System.String@)">
            <summary>
            Start observing a game using a predefined game interface
            </summary>
            <param name="gameIntf">             Game to observe</param>
            <param name="iTimeOut">             Command timeout in second</param>
            <param name="strError">             Error if any</param>
            <returns>
            true if succeed, false if game is already defined
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GetTimeOutAction">
            <summary>
            Gets the timeout action
            </summary>
            <returns>
            Timeout action
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ObserveGame(SrcChess2.FICSInterface.FICSGame,SrcChess2.ChessBoardControl,System.Int32,System.Nullable{System.Int32},System.Action{SrcChess2.FICSInterface.GameIntf,SrcChess2.FICSInterface.TerminationE,System.String},System.String@)">
            <summary>
            Start to observe a game
            </summary>
            <param name="game">                 Game to observe</param>
            <param name="chessBoardControl">    Chess board control to associate with the game</param>
            <param name="iTimeOut">             Command timeout in second</param>
            <param name="iMoveTimeOut">         Command timeout in second</param>
            <param name="actionGameFinished">   Action to call when game is finished or null if none</param>
            <param name="strError">             Error if any</param>
            <returns>
            true if succeed, false if game is already defined
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.TerminateObservation(SrcChess2.ChessBoardControl)">
            <summary>
            Terminate the game observation for the specified chess board control
            </summary>
            <param name="chessBoardControl">    Chess board control</param>
            <returns>
            true if found, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GetGameList(System.Boolean,System.Int32)">
            <summary>
            Find the list of games
            </summary>
            <param name="bRefresh">     True to refresh the list</param>
            <param name="iTimeOut">     Command timeout in second</param>
            <returns>
            List of game
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GetVariableList(System.Int32)">
            <summary>
            Gets the variable setting
            </summary>
            <param name="iTimeOut">     Command timeout in second</param>
            <returns>Setting count</returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GetServerDate(System.Int32)">
            <summary>
            Gets the date from the server
            </summary>
            <returns>
            List of date or null if timeout
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessMoveListHeader(System.String)">
            <summary>
            Process the line if it's a MoveList header
            </summary>
            <param name="strLine">  Line</param>
            <returns>
            true if it's a move list header, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.SkipMoveListHeader(System.String)">
            <summary>
            Skip the move list header
            </summary>
            <param name="strLine">  Line</param>
            <returns>
            true if found the last line of the header, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessMoveListLine(System.String)">
            <summary>
            Process a move list line
            </summary>
            <param name="strLine"></param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessSingleMove(System.String)">
            <summary>
            Process a move line
            </summary>
            <param name="strLine">  Line to analyze</param>
            <returns>
            true if a move line has been found, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessFirstGameListLine(System.String)">
            <summary>
            Process first game list line
            </summary>
            <param name="strLine">  Received line</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessGameListLine(System.String)">
            <summary>
            Process first game list line
            </summary>
            <param name="strLine">  Received line</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessVariableListHeader(System.String)">
            <summary>
            Identifies the variable part
            </summary>
            <param name="strLine">  Line</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.GettingVariableListValue(System.String)">
            <summary>
            Process variable list lines
            </summary>
            <param name="strLine">  Line</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessLine(System.String)">
            <summary>
            Process an input line. Use to process command
            </summary>
            <param name="strLine">  Received line</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.ProcessLoginText">
            <summary>
            Process input text. Use to process Login
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.m_connection_NewLineReceived(System.Object,System.EventArgs)">
            <summary>
            Called when a new line has been received
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSConnection.m_connection_NewTextReceived(System.Object,System.EventArgs)">
            <summary>
            Called when new text has been received
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSGame">
            <summary>
            Game description
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.FICSGame.GameTypeE">
            <summary>
            Type of games supported by FICS server
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Blitz">
            <summary>Blitz</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Lightning">
            <summary>Fast blitz</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Untimed">
            <summary>Untimed</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Examined">
            <summary>Examined</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Standard">
            <summary>Standard game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Wild">
            <summary>Wild variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Atomic">
            <summary>Atomic variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Crazyhouse">
            <summary>Crazyhouse variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Bughouse">
            <summary>Bughouse variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Losers">
            <summary>Losers variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.Suicide">
            <summary>Suicide variant</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.FICSGame.GameTypeE.NonStandard">
            <summary>Non standard</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.GameId">
            <summary>Game ID</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.WhiteRating">
            <summary>White Rating (-1 = unregistred, 0 = Unrated)</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.WhitePlayer">
            <summary>Name of the white player</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.BlackRating">
            <summary>Black Rating (-1 = unregistred, 0 = Unrated)</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.BlackPlayer">
            <summary>Name of the black player</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.GameType">
            <summary>Game type</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.IsRated">
            <summary>true if rated game</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.IsPrivate">
            <summary>true if private</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.PlayerTimeInMin">
            <summary>Time for each player for the game</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.IncTimeInSec">
            <summary>Time add to the total game per move</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.WhiteTimeSpan">
            <summary>White time span</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.BlackTimeSpan">
            <summary>Black time span</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.WhiteMaterialPoint">
            <summary>Current White material strength</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.BlackMaterialPoint">
            <summary>Current Black material strength</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.NextMovePlayer">
            <summary>Player making the next move</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.FICSGame.NextMoveCount">
            <summary>Count for the next move</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetHumanRating(System.Int32)">
            <summary>
            Gets rating in human form
            </summary>
            <param name="iRating">  Rating</param>
            <returns>
            Rating
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.CnvRating(System.Int32)">
            <summary>
            Convert rating to string
            </summary>
            <param name="iRating">  Rating</param>
            <returns>
            String
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.CnvPlayerName(System.String)">
            <summary>
            Convert player's name
            </summary>
            <param name="strPlayer">    Player's name</param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.TimeToString(System.TimeSpan)">
            <summary>
            Convert time to string
            </summary>
            <param name="span"> Span</param>
            <returns>
            String
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ToString">
            <summary>
            Convert the game into string
            </summary>
            <returns>
            String representation
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetNextChar(System.String,System.Int32@)">
            <summary>
            Skip the next character
            </summary>
            <param name="str">  String</param>
            <param name="iPos"> Position in the string</param>
            <returns>
            Character
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetNextNonWhiteChar(System.String,System.Int32@)">
            <summary>
            Skip the next non-white character
            </summary>
            <param name="str">  String</param>
            <param name="iPos"> Position in the string</param>
            <returns>
            Next non white character
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetNextToken(System.String,System.Int32@)">
            <summary>
            Gets the next token
            </summary>
            <param name="str">  String</param>
            <param name="iPos"> Position in the string</param>
            <returns>
            Next string token. Can be empty
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetNextDigitToken(System.String,System.Int32@)">
            <summary>
            Gets the next digit token
            </summary>
            <param name="str">  String</param>
            <param name="iPos"> Position in the string</param>
            <returns>
            Next string token. Can be empty
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GetNextEnclosedToken(System.String,System.Int32@,System.Char,System.Char)">
            <summary>
            Gets a token included between a starting and ending character
            </summary>
            <param name="str">          String</param>
            <param name="iPos">         Current position in string</param>
            <param name="cStartingChr"> Starting character</param>
            <param name="cEndingChr">   Ending character</param>
            <returns>
            Enclosed string or empty if none
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseGameType(System.Char,System.Boolean@)">
            <summary>
            Parse the type of the game
            </summary>
            <param name="chr">          Character specifying the game type</param>
            <param name="bSupported">   Return flase if the game type is not supported</param>
            <returns>
            Game type
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.GameTypeToChar(SrcChess2.FICSInterface.FICSGame.GameTypeE)">
            <summary>
            Convert a game type to its corresponding character
            </summary>
            <param name="eGameType">    Character specifying the game type</param>
            <returns>
            Character representing this game type
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseRating(System.String)">
            <summary>
            Parsing player rating
            </summary>
            <param name="strRating">    Rating</param>
            <returns>
            Rating value
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseTime(System.String)">
            <summary>
            Parse a player clock time
            </summary>
            <param name="str">  String to parse</param>
            <returns>
            Time span
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParsePlayer(System.Char)">
            <summary>
            Parse the player
            </summary>
            <param name="chr">  Character specifying the player</param>
            <returns>
            Player
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.IsLastGameLine(System.String)">
            <summary>
            Chesks if the line is the last line of a game list
            </summary>
            <param name="strLine">  Line to check</param>
            <returns>
            true / false
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseGameLine(System.String,System.Boolean@)">
            <summary>
            Parse a game string coming from the games command
            </summary>
            <param name="str">          Line containing the game information</param>
            <param name="bSupported">   Returned false if the game type is not actually supported</param>
            <returns>
            Game or null if cannot be parsed
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseMoveLine(System.Int32,System.String,System.String@,System.Nullable{System.TimeSpan}@,System.String@,System.Nullable{System.TimeSpan}@,System.String@)">
            <summary>
            Parse move found on a line
            </summary>
            <param name="iMoveIndex">   Move index</param>
            <param name="strLine">      Line of data</param>
            <param name="strWMove">     White move</param>
            <param name="spanWTime">    White time for the move</param>
            <param name="strBMove">     Black move if any</param>
            <param name="spanBTime">    Black move time if any</param>
            <param name="strError">     Error if any</param>
            <returns>
            true if succeed, false if error, null if eof
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.FICSGame.ParseMoveList(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.TimeSpan},System.String@)">
            <summary>
            Parse a list of moves
            </summary>
            <param name="iGameId">      Game ID</param>
            <param name="lines">        List of lines containing the move list</param>
            <param name="listTimeSpan"> List of time span or null if not wanted</param>
            <param name="strError">     Error if any</param>
            <returns>
            List of moves or null if error
            </returns>
        </member>
        <member name="T:SrcChess2.FICSInterface.SearchCriteria">
            <summary>
            Search Criteria
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.PlayerName">
            <summary>Game played by this player or any player if empty</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.BlitzGame">
            <summary>Allow blitz game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.LightningGame">
            <summary>Allow lightning game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.UntimedGame">
            <summary>Allow untimed game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.StandardGame">
            <summary>Allow standard game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.IsRated">
            <summary>Allow only rated game or any game if false</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MinRating">
            <summary>Minimum player rating or no minimum if null</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MinTimePerPlayer">
            <summary>Minimum playing time per player or null if no minimum</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MaxTimePerPlayer">
            <summary>Maximum playing time per player or null for no maximum</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MinIncTimePerMove">
            <summary>Minimum increment time per move or null for no minimum</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MaxIncTimePerMove">
            <summary>Maximum increment time per move or null for no maximum</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MaxMoveDone">
            <summary>Maximum move count</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.SearchCriteria.MoveTimeOut">
            <summary>Number of second between move before a timeout occurs. null for infinite</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.#ctor(SrcChess2.FICSInterface.SearchCriteria)">
            <summary>
            Copy ctor
            </summary>
            <param name="searchCriteria"></param>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.CreateDefault">
            <summary>
            Creates a default search criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.IsValid">
            <summary>
            Returns if input is valid
            </summary>
            <returns>
            true, false
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.CnvToNullableIntValue(System.String)">
            <summary>
            Convert a string to a nullable int value
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.SearchCriteria.IsGameMeetCriteria(SrcChess2.FICSInterface.FICSGame)">
            <summary>
            true if game meets the criteria
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="T:SrcChess2.FICSInterface.TerminationE">
            <summary>
            Termination
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.None">
            <summary>On going</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.WhiteWin">
            <summary>White win</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.BlackWin">
            <summary>Black win</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.Draw">
            <summary>Draw</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.Terminated">
            <summary>Terminated</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TerminationE.TerminatedWithErr">
            <summary>Terminated with error</summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.Style12MoveLine">
            <summary>
            Represent a parsed line of observed game move in style 12 (raw for interface)
            </summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE">
            <summary>Relation with the game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.IsolatedPosition">
            <summary>isolated position, such as for "ref 3" or the "sposition" command</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.ObservingExaminedGame">
            <summary>I am observing game being examined</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.Examiner">
            <summary>I am the examiner of this game</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.PlayerOpponentMove">
            <summary>I am playing, it is my opponent's move</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.PlayerMyMove">
            <summary>I am playing and it is my move</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGameE.Observer">
            <summary>I am observing a game being played</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.Board">
            <summary>Board represented by the line</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.NextMovePlayer">
            <summary>Color of the next player</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.BoardStateMask">
            <summary>Board state mask</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.IrreversibleMoveCount">
            <summary>Number of irreversible moves</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.GameId">
            <summary>Game ID</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.WhitePlayerName">
            <summary>Name of white player</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.BlackPlayerName">
            <summary>Name of black player</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.RelationWithGame">
            <summary>Relation with the game</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.InitialTime">
            <summary>Initial time</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.IncrementTime">
            <summary>Incremented time</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.WhiteMaterial">
            <summary>White material strength</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.BlackMaterial">
            <summary>Black material strength</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.WhiteRemainingTime">
            <summary>White remaining time in second</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.BlackRemainingTime">
            <summary>Black remaining time in second</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.MoveNumber">
            <summary>Move number</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.LastMoveVerbose">
            <summary>Last move represent in verbose mode ( PIECE '/' StartPosition - EndingPosition )</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.LastMoveSpan">
            <summary>Time used to make this move</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.LastMoveSAN">
            <summary>Last move represent using SAN</summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.IsFlipped">
            <summary>true if black in the bottom</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.IsClockTicking">
            <summary>true if clock is ticking</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Style12MoveLine.LagInMS">
            <summary>Lag in millisecond</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.Style12MoveLine.HalfMoveCount">
            <summary>
            Number of half move count
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.GetLineParts(System.String)">
            <summary>
            Gets line part
            </summary>
            <param name="strLine"></param>
            <returns>
            Parts
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.IsStyle12Line(System.String)">
            <summary>
            Returns if the line text represent a style 12 move line
            </summary>
            <param name="strLine">  Line to check</param>
            <returns>
            true or false
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.DecodePiece(System.Char,SrcChess2.ChessBoard.PieceE@)">
            <summary>
            Decode the piece represent by a character
            </summary>
            <param name="chr">      Character to decode</param>
            <param name="ePiece">   Resulting piece</param>
            <returns>
            true if succeed, false if error
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.SetBoardStateMask(System.String,SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Set a board state mask depending on the passed value
            </summary>
            <param name="strValue"> Value (must be 0 or 1)</param>
            <param name="eMask">    Mask to add if 1</param>
            <returns>
            true if ok, false if error
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.IsMoveTermination(System.String,System.Int32@,System.String@,System.String@)">
            <summary>
            Check if an move termination as been issued
            </summary>
            <param name="strLine">                  Line to parse</param>
            <param name="iGameId">                  Game id</param>
            <param name="strTerminationComment">    Termination comment if any</param>
            <param name="strError">                 Error if any</param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.ParseLine(System.String,System.Int32@,SrcChess2.FICSInterface.TerminationE@,System.String@,System.String@)">
            <summary>
            Parse a line
            </summary>
            <param name="strLine">                  Line to parse</param>
            <param name="iGameId">                  Game ID</param>
            <param name="eTermination">             Termination code if error or if game has ended</param>
            <param name="strTerminationComment">    Termination comment if any</param>
            <param name="strError">                 Returned error if any. null if no error detected</param>
            <returns>
            Line or null if not a style12 line or error
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.Style12MoveLine.ParseStyle12Lines(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.Queue{SrcChess2.FICSInterface.Style12MoveLine},System.String@,System.String@)">
            <summary>
            Parse the receiving line info
            </summary>
            <param name="iGameId">                  ID of the game being listened to</param>
            <param name="lines">                    List of lines to parse</param>
            <param name="queueLine">                Queue where to register parsed lines</param>
            <param name="strTerminationComment">    Termination comment if any</param>
            <param name="strError">                 Error if any, null if none</param>
            <returns>
            Termination code
            </returns>
        </member>
        <member name="T:SrcChess2.FICSInterface.Verbs">
            <summary>
            Telnet Verb
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Verbs.WILL">
            <summary>Ask if option is available</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Verbs.WONT">
            <summary>Refuse the option</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Verbs.DO">
            <summary>Please do it</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Verbs.DONT">
            <summary>Please don't</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Verbs.IAC">
            <summary>IAC command</summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.Options">
            <summary>
            TELNET options
            </summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.Options.SGA">
            <summary>SGA option</summary>
        </member>
        <member name="T:SrcChess2.FICSInterface.TelnetConnection">
            <summary>
            minimalistic telnet implementation
            conceived by Tom Janssens on 2007/06/06  for codeproject
            </summary>
        </member>
        <member name="E:SrcChess2.FICSInterface.TelnetConnection.NewTextReceived">
            <summary>Called when a new text has been received</summary>
        </member>
        <member name="E:SrcChess2.FICSInterface.TelnetConnection.NewLineReceived">
            <summary>Called when a new line has been received</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_tcpSocket">
            <summary>TCP/IP socket</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_stream">
            <summary>Network stream</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_buf">
            <summary>Receiving buffer</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_bLastByte">
            <summary>Up to one unprocessed byte</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_strbInput">
            <summary>String builder containing the received character</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_bListening">
            <summary>true if object is listening</summary>
        </member>
        <member name="F:SrcChess2.FICSInterface.TelnetConnection.m_bDebugTrace">
            <summary>true to send trace to debugging output</summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.#ctor(System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="bDebugTrace">  true to send send text and received text to the debugger output</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.Dispose(System.Boolean)">
            <summary>
            Disposing the object
            </summary>
            <param name="bDisposing">   true for dispose, false for finallizing</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.Dispose">
            <summary>
            Dispose the connection to the FICS server
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.Connect(System.String,System.Int32)">
            <summary>
            Connect to the port
            </summary>
            <param name="strHostName">  Host name</param>
            <param name="iPort">        Port number</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="P:SrcChess2.FICSInterface.TelnetConnection.DebugTrace">
            <summary>
            true to send debugging information to the debugging output
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.OnNewTextReceived(System.EventArgs)">
            <summary>
            Trigger the NewTextReceived event
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.OnNewLineReceived(System.EventArgs)">
            <summary>
            Trigger the NewLineReceived event
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.Send(System.String)">
            <summary>
            Send a text to telnet host
            </summary>
            <param name="strCmd">   Command</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.SendLine(System.String)">
            <summary>
            Send a line to telnet host
            </summary>
            <param name="strCmd">   Command</param>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.ParseTelnet(System.Int32)">
            <summary>
            Parse the received buffer
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.ReadInput">
            <summary>
            Read the received data
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.ProcessInput">
            <summary>
            Process the input
            </summary>
        </member>
        <member name="P:SrcChess2.FICSInterface.TelnetConnection.IsListening">
            <summary>
            Returns true if still listening
            </summary>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.GetAllReadText">
            <summary>
            Read text already read
            </summary>
            <returns>
            Read text
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.GetNextReadLine">
            <summary>
            Returns the next already read line
            </summary>
            <returns>
            Next read line or null if not read yet
            </returns>
        </member>
        <member name="M:SrcChess2.FICSInterface.TelnetConnection.FlushInput">
            <summary>
            Flush received buffer
            </summary>
        </member>
        <member name="T:SrcChess2.frmLoadPGNGames">
            <summary>
            Interaction logic for frmLoadPGNGames.xaml
            </summary>
            <summary>
            frmLoadPGNGames
            </summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_strFileName">
            <summary>Processed file name</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_task">
            <summary>Task used to process the file</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_iTotalSkipped">
            <summary>Total skipped games</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_iTotalTruncated">
            <summary>Total truncated games</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_strError">
            <summary>Error if any</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_ePhase">
            <summary>Actual phase</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_bResult">
            <summary>PGN parsing result</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_pgnGames">
            <summary>PGN games</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPGNGames.m_pgnParser">
            <summary>PGN parser</summary>
        </member>
        <member name="T:SrcChess2.frmLoadPGNGames.delProgressCallBack">
            <summary>Private delegate</summary>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.PGNParsing_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the windows is loaded
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.PGNParsing_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the windows is closing
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="P:SrcChess2.frmLoadPGNGames.PGNGames">
            <summary>
            List of PGN games read from the file
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPGNGames.PGNParser">
            <summary>
            PGN Parser
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPGNGames.TotalSkipped">
            <summary>
            Total number of games skipped
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPGNGames.TotalTruncated">
            <summary>
            Total number of games truncated
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPGNGames.Error">
            <summary>
            Error if any
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.butCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel the parsing job
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.WndCallBack(SrcChess2.PgnParser.ParsingPhaseE,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Progress bar
            </summary>
            <param name="ePhase">       Phase</param>
            <param name="iFileIndex">   File index</param>
            <param name="iFileCount">   File count</param>
            <param name="strFileName">  File name</param>
            <param name="iGameDone">    Games processed since the last call</param>
            <param name="iGameCount">   Game count</param>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.ProgressCallBack(System.Object,SrcChess2.PgnParser.ParsingPhaseE,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Progress bar
            </summary>
            <param name="cookie">           Cookie</param>
            <param name="ePhase">           Phase</param>
            <param name="iFileIndex">       File index</param>
            <param name="iFileCount">       File count</param>
            <param name="strFileName">      File name</param>
            <param name="iGameProcessed">   Games processed since the last call</param>
            <param name="iGameCount">       Game count</param>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.LoadPGN">
            <summary>
            Load the PGN games from the specified file
            </summary>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.frmLoadPGNGames.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmLoadPuzzle">
            <summary>
            Interaction logic for frmLoadPuzzle.xaml
            </summary>
            <summary>
            frmLoadPuzzle
            </summary>
        </member>
        <member name="T:SrcChess2.frmLoadPuzzle.PuzzleItem">
            <summary>
            Puzzle item class use to fill the listview
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.PuzzleItem.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="iId">              Puzzle id</param>
            <param name="strDescription">   Description</param>
            <param name="bDone">            true if already been done</param>
        </member>
        <member name="P:SrcChess2.frmLoadPuzzle.PuzzleItem.Id">
            <summary>Puzzle id</summary>
        </member>
        <member name="P:SrcChess2.frmLoadPuzzle.PuzzleItem.Description">
            <summary>Puzzle description</summary>
        </member>
        <member name="P:SrcChess2.frmLoadPuzzle.PuzzleItem.Done">
            <summary>true if this puzzle has been done</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPuzzle.m_listPGNGame">
            <summary>List of PGN Games</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPuzzle.m_pgnParser">
            <summary>PGN parser</summary>
        </member>
        <member name="F:SrcChess2.frmLoadPuzzle.m_plDoneMask">
            <summary>Done mask</summary>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.#ctor(System.Int64[])">
            <summary>
            Ctor
            </summary>
            <param name="plDoneMask">   Mask of game which has been done</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.LoadPGN">
            <summary>
            Load PGN text from resource
            </summary>
            <returns>PGN text</returns>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.BuildPuzzleList">
            <summary>
            Build a list of puzzles using the PGN find in resource
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPuzzle.Game">
            <summary>
            Gets the selected game
            </summary>
        </member>
        <member name="P:SrcChess2.frmLoadPuzzle.GameIndex">
            <summary>
            Returns the selected game index
            </summary>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the OK button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.butCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Cancel button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.butResetDone_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Reset Done button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.listViewPuzzle_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when a selection is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.listViewPuzzle_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a selection is double clicked
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmLoadPuzzle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.Move">
            <summary>
            Defines a chess move
            </summary>
        </member>
        <member name="T:SrcChess2.Move.TypeE">
            <summary>Type of possible move</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.Normal">
            <summary>Normal move</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PawnPromotionToQueen">
            <summary>Pawn which is promoted to a queen</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.Castle">
            <summary>Castling</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.EnPassant">
            <summary>Prise en passant</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PawnPromotionToRook">
            <summary>Pawn which is promoted to a rook</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PawnPromotionToBishop">
            <summary>Pawn which is promoted to a bishop</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PawnPromotionToKnight">
            <summary>Pawn which is promoted to a knight</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PawnPromotionToPawn">
            <summary>Pawn which is promoted to a pawn</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.MoveTypeMask">
            <summary>Piece type mask</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.PieceEaten">
            <summary>The move eat a piece</summary>
        </member>
        <member name="F:SrcChess2.Move.TypeE.MoveFromBook">
            <summary>Move coming from book opening</summary>
        </member>
        <member name="M:SrcChess2.Move.#ctor(SrcChess2.ChessBoard.PieceE,System.Int32,System.Int32,SrcChess2.Move.TypeE)">
            <summary>
            Ctor
            </summary>
            <param name="eOriginalPiece">   Piece which has been eaten if any</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="eType">            Move type</param>
        </member>
        <member name="F:SrcChess2.Move.OriginalPiece">
            <summary>Original piece if a piece has been eaten</summary>
        </member>
        <member name="F:SrcChess2.Move.StartPos">
            <summary>Start position of the move (0-63)</summary>
        </member>
        <member name="F:SrcChess2.Move.EndPos">
            <summary>End position of the move (0-63)</summary>
        </member>
        <member name="F:SrcChess2.Move.Type">
            <summary>Type of move</summary>
        </member>
        <member name="T:SrcChess2.CustomColorPicker">
            <summary>
            Interaction logic for CustomColorPicker.xaml
            </summary>
            <summary>
            CustomColorPicker
            </summary>
        </member>
        <member name="E:SrcChess2.CustomColorPicker.SelectedColorChanged">
            <summary>
            SelectedColor event
            </summary>
        </member>
        <member name="P:SrcChess2.CustomColorPicker.HexValue">
            <summary>
            Color in Hexadecimal
            </summary>
        </member>
        <member name="P:SrcChess2.CustomColorPicker.SelectedColor">
            <summary>
            Selected Color
            </summary>
        </member>
        <member name="M:SrcChess2.CustomColorPicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.CustomColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ColorPicker">
            <summary>
            Color Picker
            </summary>
            <summary>
            ColorPicker
            </summary>
        </member>
        <member name="P:SrcChess2.ColorPicker.CustomColor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.loadBitmap(System.Drawing.Bitmap)">
            <summary>
            Load the bitmap
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ColorPicker.GetColorFromImage(System.Int32,System.Int32)">
            <summary>
            1*1 pixel copy is based on an article by Lee Brimelow    
            http://thewpfblog.com/?p=62
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ColorToSolidColorBrushConverter">
            <summary>
            Converter
            </summary>
        </member>
        <member name="M:SrcChess2.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:SrcChess2.frmAbout">
            <summary>
            Interaction logic for frmAbout.xaml
            </summary>
            <summary>
            frmAbout
            </summary>
        </member>
        <member name="M:SrcChess2.frmAbout.#ctor">
            <summary>
            Class CTor
            </summary>
        </member>
        <member name="M:SrcChess2.frmAbout.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is closed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmAbout.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmBoardSetting">
            <summary>Pickup the colors use to draw the chess control</summary>
            <summary>
            frmBoardSetting
            </summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.LiteCellColor">
            <summary>Lite Cell Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.DarkCellColor">
            <summary>Dark Cell Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.WhitePieceColor">
            <summary>White Piece Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.BlackPieceColor">
            <summary>Black Piece Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.BackgroundColor">
            <summary>Background Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.PieceSet">
            <summary>Selected PieceSet</summary>
        </member>
        <member name="F:SrcChess2.frmBoardSetting.m_listPieceSet">
            <summary>List of Piece Sets</summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Collections.Generic.SortedList{System.String,SrcChess2.PieceSet},SrcChess2.PieceSet)">
            <summary>
            Class constructor
            </summary>
            <param name="colorLiteCell">    Lite Cells Color</param>
            <param name="colorDarkCell">    Dark Cells Color</param>
            <param name="colorWhitePiece">  White Pieces Color</param>
            <param name="colorBlackPiece">  Black Pieces Color</param>
            <param name="backGroundColor">  Main window background color</param>
            <param name="listPieceSet">     List of Piece Sets</param>
            <param name="pieceSet">         Current Piece Set</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.frmBoardSetting_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the form is loaded
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorPickerDark_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the dark cell color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorPickerLite_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the lite cell color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorBackground_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the background color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.FillPieceSet">
            <summary>
            Fill the combo box with the list of piece sets
            </summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.butResetToDefault_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the reset to default button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.comboBoxPieceSet_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the PieceSet is changed
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmCreatePgnGame">
            <summary>
            Interaction logic for frmCreatePgnGame.xaml
            </summary>
            <summary>
            frmCreatePgnGame
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.MoveList">
            <summary>Array of move list</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.StartingChessBoard">
            <summary>Board starting position</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.StartingColor">
            <summary>Starting Color</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhitePlayerName">
            <summary>Name of the player playing white</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackPlayerName">
            <summary>Name of the player playing black</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhitePlayerType">
            <summary>Player type (computer or human)</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackPlayerType">
            <summary>Player type (computer or human)</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhiteTimer">
            <summary>White player playing time</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackTimer">
            <summary>Black player playing time</summary>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmGameParameter">
            <summary>
            Pickup Game Parameter from the player
            </summary>
            <summary>
            frmGameParameter
            </summary>
        </member>
        <member name="P:SrcChess2.frmGameParameter.ParentWindow">
            <summary>Parent Window</summary>
        </member>
        <member name="F:SrcChess2.frmGameParameter.SettingSearchMode">
            <summary>Search mode</summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.#ctor(SrcChess2.MainWindow,SrcChess2.SettingSearchMode)">
            <summary>
            Default constructor
            </summary>
            <param name="parent">               Parent Window</param>
            <param name="settingSearchMode">    Search mode</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.CheckState">
            <summary>
            Check the state of the group box
            </summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to accept the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.radioButtonOpponent_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the radio button value is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.AskGameParameter(SrcChess2.MainWindow,SrcChess2.SettingSearchMode)">
            <summary>
            Ask for the game parameter
            </summary>
            <param name="parent">               Parent window</param>
            <param name="settingSearchMode">    Search mode</param>
            <returns>
            true if succeed
            </returns>
        </member>
        <member name="M:SrcChess2.frmGameParameter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmPgnFilter">
            <summary>
            Interaction logic for frmPgnFilter.xaml
            </summary>
            <summary>
            frmPgnFilter
            </summary>
        </member>
        <member name="T:SrcChess2.frmPgnFilter.RangeItem">
            <summary>Represent an ELO range in the checked list control</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_filterClause">
            <summary>Clause use to filter PGN games</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_pgnParser">
            <summary>PGN Parser</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_pgnUtil">
            <summary>PGN utility class</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_pgnGames">
            <summary>PGN games without move list</summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.#ctor(SrcChess2.PgnParser,SrcChess2.PgnUtil,System.Collections.Generic.List{SrcChess2.PgnGame},System.Int32,System.Int32,System.String[],System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="pgnParser">        PGN parser</param>
            <param name="pgnUtil">          PGN utility class</param>
            <param name="pgnGames">         Raw games</param>
            <param name="iMinELO">          Minimum ELO in the PGN file</param>
            <param name="iMaxELO">          Maximum ELO in the PGN file</param>
            <param name="arrPlayers">       List of players found in the PGN file</param>
            <param name="strInpFileName">   Name of the input file.</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.CheckAllItems(System.Windows.Controls.ListBox,System.Boolean)">
            <summary>
            Checks or unchecks all items in a checked list control
            </summary>
            <param name="listBox">      Control</param>
            <param name="bChecked">     true to check, false to uncheck</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.GetCheckedCount(System.Windows.Controls.ListBox)">
            <summary>
            Gets the number of checked item
            </summary>
            <param name="listBox">      Control</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.SyncInfo">
            <summary>
            Gets and validates information coming from the user
            </summary>
            <returns>
            true if validation is ok, false if not
            </returns>
        </member>
        <member name="P:SrcChess2.frmPgnFilter.FilteringClause">
            <summary>
            Clause use to filter the PGN file has defined by the user. Valid after the Ok button has been clicked.
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butTest_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllPlayers_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllPlayers_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllEndGame_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllEndGame_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Range checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Ranges checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Players checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Players checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All End Games checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All End Games checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmPgnGamePicker">
            <summary>
            Interaction logic for frmPgnGamePicker.xaml
            </summary>
            <summary>
            frmPgnGamePicker
            </summary>
        </member>
        <member name="T:SrcChess2.frmPgnGamePicker.PGNGameDescItem">
            <summary>Item used to fill the description listbox so we can find the original index in the list after a sort</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.PGNGameDescItem.m_strDesc">
            <summary>Game description</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.PGNGameDescItem.m_iIndex">
            <summary>Original position index</summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.PGNGameDescItem.#ctor(System.String,System.Int32)">
            <summary>
            Class constructor
            </summary>
            <param name="strDesc">  Item description</param>
            <param name="iIndex">   Item index</param>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.PGNGameDescItem.Description">
            <summary>
            Description of the item
            </summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.PGNGameDescItem.Index">
            <summary>
            Index of the item
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.PGNGameDescItem.CompareTo(SrcChess2.frmPgnGamePicker.PGNGameDescItem)">
            <summary>
            IComparable interface
            </summary>
            <param name="other">    Item to compare with</param>
            <returns>
            -1, 0, 1
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.PGNGameDescItem.ToString">
            <summary>
            Return the description
            </summary>
            <returns>
            Description
            </returns>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.MoveList">
            <summary>List of moves for the current game</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.SelectedGame">
            <summary>Selected game</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.StartingChessBoard">
            <summary>Starting board. Null if standard board</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.StartingColor">
            <summary>Starting color</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhitePlayerName">
            <summary>White Player Name</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackPlayerName">
            <summary>Black Player Name</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhitePlayerType">
            <summary>White Player Type</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackPlayerType">
            <summary>Black Player Type</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhiteTimer">
            <summary>White Timer</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackTimer">
            <summary>Black Timer</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.m_pgnUtil">
            <summary>Utility class</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.m_pgnGames">
            <summary>List of games</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.m_pgnParser">
            <summary>PGN parser</summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.GetSelectedGame">
            <summary>
            Get the selected game content
            </summary>
            <returns>
            Game or null if none selected
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.RefreshGameDisplay">
            <summary>
            Refresh the textbox containing the selected game content
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.GetGameDesc(SrcChess2.PgnGame)">
            <summary>
            Get game description
            </summary>
            <param name="pgnGame">  PGN game</param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.InitForm(System.String)">
            <summary>
            Initialize the form with the content of the PGN file
            </summary>
            <param name="strFileName">  PGN file name</param>
            <returns>
            true if at least one game has been found.
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.GameSelected(System.Boolean)">
            <summary>
            Called when a game is selected
            </summary>
            <param name="bNoMove">  true to ignore the move list</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.Button_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.Button_Click_1(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form (but no move)
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.listBoxGames_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the game selection is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmQueryPawnPromotionType">
            <summary>
            Ask user for the to pawn promotion piece
            </summary>
            <summary>
            frmQueryPawnPromotionType
            </summary>
        </member>
        <member name="F:SrcChess2.frmQueryPawnPromotionType.m_eValidPawnPromotion">
            <summary>Pawn Promotion Piece</summary>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.#ctor(SrcChess2.ChessBoard.ValidPawnPromotionE)">
            <summary>
            Class constructor
            </summary>
            <param name="eValidPawnPromotion">  The valid pawn promotion type</param>
        </member>
        <member name="P:SrcChess2.frmQueryPawnPromotionType.PromotionType">
            <summary>
            Get the pawn promotion type
            </summary>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event Parameter</param>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmSearchMode">
            <summary>
            Ask user about search mode
            </summary>
            <summary>
            frmSearchMode
            </summary>
        </member>
        <member name="F:SrcChess2.frmSearchMode.m_settingSearchMode">
            <summary>Source search mode object</summary>
        </member>
        <member name="F:SrcChess2.frmSearchMode.m_boardEvalUtil">
            <summary>Board evaluation utility class</summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.#ctor(SrcChess2.SettingSearchMode,SrcChess2.BoardEvaluationUtil)">
            <summary>
            Class constructor
            </summary>
            <param name="settingSearchMode">Actual search mode</param>
            <param name="boardEvalUtil">    Board Evaluation list</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.plyCount_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Called when the ply count is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.radioButtonLevel_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when one of the radioButtonLevel radio button has been changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.radioButtonAlphaBeta_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when radioButtonAlphaBeta checked state has been changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.SetPlyAvgTimeState">
            <summary>
            Set the plyCount/avgTime control state
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.radioButtonSearchType_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when radioButtonFixDepth checked state has been changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.textBoxTimeInSec_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the time in second textbox changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.textBoxTransSize_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the transposition table size is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.UpdateSearchMode">
            <summary>
            Update the SearchMode object
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmTestBoardEval">
            <summary>Enter parameters for testing the board evaluation functions</summary>
            <summary>
            frmTestBoardEval
            </summary>
        </member>
        <member name="F:SrcChess2.frmTestBoardEval.m_boardEvalUtil">
            <summary>Board evaluation utility</summary>
        </member>
        <member name="F:SrcChess2.frmTestBoardEval.m_searchMode">
            <summary>Resulting search mode</summary>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.#ctor(SrcChess2.BoardEvaluationUtil,SrcChess2.SearchMode)">
            <summary>
            Class Ctor
            </summary>
            <param name="boardEvalUtil">        Board evaluation utility class</param>
            <param name="searchModeTemplate">   Search mode template</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.gameCount_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Called when game count changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.plyCount_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Called when ply count changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="P:SrcChess2.frmTestBoardEval.SearchMode">
            <summary>
            Get the search mode
            </summary>
        </member>
        <member name="P:SrcChess2.frmTestBoardEval.GameCount">
            <summary>
            Get the number of games to test
            </summary>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the ok button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.GameTimer">
            <summary>
            Handle the timer for both player
            </summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_bEnabled">
            <summary>true if timer is tickling</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timerStart">
            <summary>Time of last commit</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanCommitedWhite">
            <summary>Commited time for the white</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanCommitedBlack">
            <summary>Commited time for the black</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanMaxWhite">
            <summary>Maximum time allowed for white player</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanMaxBlack">
            <summary>Maximum time allowed for black player</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_iMoveIncInSec">
            <summary>Move increment in second</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_ePlayerColor">
            <summary>Player currently playing</summary>
        </member>
        <member name="M:SrcChess2.GameTimer.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.GameTimer.Commit">
            <summary>
            Commit the uncommited time to the current player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.Enabled">
            <summary>
            Enabled state of the timer
            </summary>
        </member>
        <member name="M:SrcChess2.GameTimer.ResetTo(SrcChess2.ChessBoard.PlayerE,System.Int64,System.Int64)">
            <summary>
            Reset the timer of both player
            </summary>
            <param name="ePlayerColor"> Playing color</param>
            <param name="lWhiteTicks">  White Ticks</param>
            <param name="lBlackTicks">  Black Ticks</param>
        </member>
        <member name="M:SrcChess2.GameTimer.Reset(SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Reset the timer of both player
            </summary>
            <param name="ePlayerColor"> Playing color</param>
        </member>
        <member name="P:SrcChess2.GameTimer.PlayerColor">
            <summary>
            Color of the player playing
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.WhitePlayTime">
            <summary>
            Time spent by the white player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.MaxWhitePlayTime">
            <summary>
            Time spent by the white player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.MaxBlackPlayTime">
            <summary>
            Time spent by the black player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.BlackPlayTime">
            <summary>
            Time spent by the black player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.MoveIncInSec">
            <summary>
            Maximum time increment by move in second
            </summary>
        </member>
        <member name="M:SrcChess2.GameTimer.GetHumanElapse(System.TimeSpan)">
            <summary>
            Time span to string
            </summary>
        </member>
        <member name="T:SrcChess2.LocalChessBoardControl">
            <summary>
            Override chess control to add information to the saved board
            </summary>
        </member>
        <member name="P:SrcChess2.LocalChessBoardControl.Father">
            <summary>Father Window</summary>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.LoadGame(System.IO.BinaryReader)">
            <summary>
            Load the game board
            </summary>
            <param name="reader">   Binary reader</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.SaveGame(System.IO.BinaryWriter)">
            <summary>
            Save the game board
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.MoveExt},SrcChess2.ChessBoard.PlayerE,System.String,System.String,SrcChess2.PlayerTypeE,SrcChess2.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eNextMoveColor">       Color starting to play</param>
            <param name="strWhitePlayerName">   Name of the player playing white pieces</param>
            <param name="strBlackPlayerName">   Name of the player playing black pieces</param>
            <param name="eWhitePlayerType">     Type of player playing white pieces</param>
            <param name="eBlackPlayerType">     Type of player playing black pieces</param>
            <param name="spanPlayerWhite">      Timer for white</param>
            <param name="spanPlayerBlack">      Timer for black</param>
        </member>
        <member name="T:SrcChess2.LostPiecesControl">
            <summary>
            Show a list of lost pieces
            </summary>
            <summary>
            LostPiecesControl
            </summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_arrBorder">
            <summary>Array of frame containing the piece visual</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_arrPiece">
            <summary>Array containining the pieces</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_chessBoardCtl">
            <summary>Chess Board Control</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_pieceSet">
            <summary>Piece Set to use to show the pieces</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_bDesignMode">
            <summary>true if in design mode. In design mode, One of each possible pieces is shown and one can be selected.</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_iSelectedPiece">
            <summary>Piece currently selected in design mode.</summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.Color">
            <summary>Color being displayed. false = White, true = Black</summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.EnumPiece">
            <summary>
            Enumerate the pieces which must be shown in the control
            </summary>
            <returns>
            Array of pieces
            </returns>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.MakeSquare(System.Windows.Size)">
            <summary>
            Make the grid square
            </summary>
            <param name="size"> User control size</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Called when the Measure() method is called
            </summary>
            <param name="constraint">   Size constraint</param>
            <returns>
            Control size
            </returns>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.SetPieceControl(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the chess piece control
            </summary>
            <param name="iPos">         Piece position</param>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.RefreshCell(SrcChess2.ChessBoard.PieceE[],System.Int32,System.Boolean)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="arrNewPieces"> New pieces value</param>
            <param name="iPos">         Piece position</param>
            <param name="bFullRefresh"> true to refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.Refresh(System.Boolean)">
            <summary>
            Refresh the board
            </summary>
            <param name="bFullRefresh"> Refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.Refresh">
            <summary>
            Refresh the board
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.ChessBoardControl">
            <summary>
            Chess Board Control associate with this control
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.PieceSet">
            <summary>
            Piece Set use to draw the visual pieces
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.SelectedIndex">
            <summary>
            Select a piece (in design mode only)
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.SelectedPiece">
            <summary>
            Gets the currently selected piece
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.BoardDesignMode">
            <summary>
            Select the design mode
            </summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when one of the mouse button is release
            </summary>
            <param name="e">        Event</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            TODO:
                Implement blitz
                Implement background thinking while human is playing
                Try to find a better color picker
                Indicates the rating of the move found
                
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="T:SrcChess2.MainWindow.BoardEvaluationStat">
            <summary>Getting computer against computer playing statistic</summary>
        </member>
        <member name="T:SrcChess2.MainWindow.MessageModeE">
            <summary>Use for computer move</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.Silent">
            <summary>No message</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.CallEndGame">
            <summary>Only messages for move which are terminating the game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.Verbose">
            <summary>All messages</summary>
        </member>
        <member name="T:SrcChess2.MainWindow.PlayingModeE">
            <summary>Current playing mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.PlayerAgainstPlayer">
            <summary>Player plays against another player</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.ComputerPlayWhite">
            <summary>Computer play the white against a human black</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.ComputerPlayBlack">
            <summary>Computer play the black against a human white</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.ComputerPlayBoth">
            <summary>Computer play against computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.DesignMode">
            <summary>Design mode.</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.TestEvaluationMethod">
            <summary>Test evaluation methods. Computer play against itself in loop using two different evaluation methods</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.NewGameCommand">
            <summary>Command: New Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.LoadGameCommand">
            <summary>Command: Load Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.LoadPuzzleCommand">
            <summary>Command: Load Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CreateGameCommand">
            <summary>Command: Create Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SaveGameCommand">
            <summary>Command: Save Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SaveGameInPGNCommand">
            <summary>Command: Save Game in PGN</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CreateSnapshotCommand">
            <summary>Command: Save Game in PGN</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.ConnectToFICSCommand">
            <summary>Command: Connect to FICS Server</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.DisconnectFromFICSCommand">
            <summary>Command: Connect to FICS Server</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.ObserveFICSGameCommand">
            <summary>Command: Connect to FICS Server</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.QuitCommand">
            <summary>Command: Quit</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.HintCommand">
            <summary>Command: Hint</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.UndoCommand">
            <summary>Command: Undo</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.RedoCommand">
            <summary>Command: Redo</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.RefreshCommand">
            <summary>Command: Refresh</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SelectPlayersCommand">
            <summary>Command: Select Players</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.AutomaticPlayCommand">
            <summary>Command: Automatic Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FastAutomaticPlayCommand">
            <summary>Command: Fast Automatic Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CancelPlayCommand">
            <summary>Command: Cancel Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.DesignModeCommand">
            <summary>Command: Design Mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SearchModeCommand">
            <summary>Command: Search Mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FlashPieceCommand">
            <summary>Command: Flash Piece</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PGNNotationCommand">
            <summary>Command: PGN Notation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.BoardSettingCommand">
            <summary>Command: Board Settings</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CreateBookCommand">
            <summary>Command: Create a Book</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FilterPGNFileCommand">
            <summary>Command: Filter a PGN File</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.TestBoardEvaluationCommand">
            <summary>Command: Test Board Evaluation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.AboutCommand">
            <summary>Command: Test Board Evaluation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_arrCommands">
            <summary>List of all supported commands</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_ePlayingMode">
            <summary>Playing mode (player vs player, player vs computer, computer vs computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_eComputerPlayingColor">
            <summary>Color played by the computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_boardEvalUtil">
            <summary>Utility class to handle board evaluation objects</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_listPieceSet">
            <summary>List of piece sets</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_pieceSet">
            <summary>Currently selected piece set</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_colorBackground">
            <summary>Color use to create the background brush</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_dispatcherTimer">
            <summary>Dispatcher timer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_eMessageMode">
            <summary>Current message mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_settingSearchMode">
            <summary>Search mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_ficsConnection">
            <summary>Connection to FICS Chess Server</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_ficsConnectionSetting">
            <summary>Setting to connect to the FICS server</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_settingAdaptor">
            <summary>Convert properties settings to/from object setting</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_searchCriteria">
            <summary>Search criteria to use to find FICS game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_iPuzzleGameIndex">
            <summary>Index of the puzzle game being played (if not -1)</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_arrPuzzleMask">
            <summary>Mask of puzzle which has been solved</summary>
        </member>
        <member name="M:SrcChess2.MainWindow.#cctor">
            <summary>
            Static Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.MainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the main window is closing
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.MainWindow.MainWindow_Closed(System.Object,System.EventArgs)">
            <summary>
            Called when the main window has been closed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.MainWindow.OnExecutedCmd(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the specified command
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Routed event argument</param>
        </member>
        <member name="M:SrcChess2.MainWindow.OnCanExecuteCmd(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determine if a command can be executed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Routed event argument</param>
        </member>
        <member name="P:SrcChess2.MainWindow.PieceSet">
            <summary>
            Used piece set
            </summary>
        </member>
        <member name="P:SrcChess2.MainWindow.PlayingMode">
            <summary>
            Current playing mode (player vs player, player vs computer or computer vs computer)
            </summary>
        </member>
        <member name="P:SrcChess2.MainWindow.IsComputerMustPlay">
            <summary>
            Checks if computer must play the current move
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.CheckIfDirty">
            <summary>
            Checks if board is dirty and need to be saved
            </summary>
            <returns>
            true if still dirty (command must be canceled), false not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.SetPlayingMode(SrcChess2.MainWindow.PlayingModeE)">
            <summary>
            Set the current playing mode. Defined as a method so it can be called by a delegate
            </summary>
            <param name="ePlayingMode"> Playing mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.StartAsyncComputing">
            <summary>
            Start asynchronous computing
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowMoveInStatusBar(SrcChess2.ChessBoard.PlayerE,SrcChess2.MoveExt)">
            <summary>
            Show a move in status bar
            </summary>
            <param name="ePlayerColor"> Color of the move</param>
            <param name="move">         Move</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowSearchMode">
            <summary>
            Show the current searching parameters in the status bar
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.DisplayMessage(SrcChess2.ChessBoard.GameResultE,SrcChess2.MainWindow.MessageModeE)">
            <summary>
            Display a message related to the MoveStateE
            </summary>
            <param name="eMoveResult">  Move result</param>
            <param name="eMessageMode"> Message mode</param>
            <returns>
            true if it's the end of the game. false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.ResetBoard">
            <summary>
            Reset the board.
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SetCmdState">
            <summary>
            Determine which menu item is enabled
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.UnlockBoard">
            <summary>
            Unlock the chess board when asynchronous computing is finished
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerEnd(System.Boolean,SrcChess2.MoveExt)">
            <summary>
            Play the computer move found by the search.
            </summary>
            <param name="bFlashing">    true to flash moving position</param>
            <param name="move">         Best move</param>
            <returns>
            true if end of game, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputer(System.Boolean)">
            <summary>
            Make the computer play the next move
            </summary>
            <param name="bFlash">           true to flash moving position</param>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerAgainstComputer(System.Boolean)">
            <summary>
            Make the computer play the next move
            </summary>
            <param name="bFlash">           true to flash moving position</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestShowResult(SrcChess2.MainWindow.BoardEvaluationStat)">
            <summary>
            Show the test result of a computer playing against a computer
            </summary>
            <param name="stat">             Statistic.</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestBoardEvaluation_PlayNextMove(SrcChess2.MainWindow.BoardEvaluationStat,SrcChess2.MoveExt)">
            <summary>
            Play the next move when doing a board evaluation
            </summary>
            <param name="stat"> Board evaluation statistic</param>
            <param name="move"> Move to be done</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestBoardEvaluation(System.Int32,SrcChess2.SearchMode)">
            <summary>
            Tests the computer playing against itself. Can be called asynchronously by a secondary thread.
            </summary>
            <param name="iGameCount">       Number of games to play.</param>
            <param name="searchMode">       Search mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowHintEnd(System.Boolean,SrcChess2.MoveExt)">
            <summary>
            Show the hint move in the status bar
            </summary>
            <param name="bBeforeMove">  true if before showing the move, false if after</param>
            <param name="move">         Move to show</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowHint">
            <summary>
            Show a hint
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ToggleDesignMode">
            <summary>
            Toggle the design mode. In design mode, the user can create its own board
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.NewGame">
            <summary>
            Called when the game need to be reinitialized
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.LoadGame">
            <summary>
            Load a board
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.LoadPuzzle">
            <summary>
            Load a puzzle
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.CreateGame">
            <summary>
            Creates a game from a PGN text
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ConnectToFICS">
            <summary>
            Try to connect to the FICS Chess Server
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ObserveFICSGame">
            <summary>
            Observe a FICS Game
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ObserveFinished(SrcChess2.FICSInterface.GameIntf,SrcChess2.FICSInterface.TerminationE,System.String)">
            <summary>
            Called when an observed game is finished
            </summary>
            <param name="gameIntf">         Game interface</param>
            <param name="eTerminationCode"> Termination code</param>
            <param name="strMsg">           Message</param>
        </member>
        <member name="M:SrcChess2.MainWindow.DisconnectFromFICS">
            <summary>
            Disconnect from the FICS Chess Server
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.CancelAutoPlay">
            <summary>
            Cancel the auto-play
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SelectPlayers">
            <summary>
            Toggle the player vs player mode.
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.FilterPGNFile">
            <summary>
            Filter the content of a PGN file
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowAbout">
            <summary>
            Show the About Dialog Box
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SetSearchMode">
            <summary>
            Specifies the search mode
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.TestBoardEvaluation">
            <summary>
            Test board evaluation routine
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.DoAutomaticMove(System.Boolean)">
            <summary>
            Do the move which are done by the computer
            </summary>
            <param name="bFlashing">    true to flash moving pieces</param>
        </member>
        <member name="M:SrcChess2.MainWindow.DoAutomaticMove">
            <summary>
            Do the move which are done by the computer
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.StartAutomaticMove">
            <summary>
            Start automatic move mode when a new game is started
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.TogglePGNNotation">
            <summary>
            Toggle PGN/Move notation
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ToggleFlashPiece">
            <summary>
            Toggle Flash piece
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ChooseBoardSetting">
            <summary>
            Choose board setting
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.dispatcherTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Called each second for timer click
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_QueryPiece(System.Object,SrcChess2.ChessBoardControl.QueryPieceEventArgs)">
            <summary>
            Called to gets the selected piece for design mode
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_QueryPawnPromotionType(System.Object,SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs)">
            <summary>
            Called to gets the type of pawn promotion for the current move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_FindMoveBegin(System.Object,System.EventArgs)">
            <summary>
            Called when FindBestMove finished its job
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_FindMoveEnd(System.Object,System.EventArgs)">
            <summary>
            Called when FindBestMove begin its job
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_NewMove(System.Object,SrcChess2.ChessBoardControl.NewMoveEventArgs)">
            <summary>
            Called when a new move has been done in the chessboard control
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_moveViewer_NewMoveSelected(System.Object,SrcChess2.MoveViewer.NewMoveSelectedEventArg)">
            <summary>
            Called when a move is selected in the MoveViewer
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_MoveSelected(System.Object,SrcChess2.ChessBoardControl.MoveSelectedEventArgs)">
            <summary>
            Called when the user has selected a valid move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_UpdateCmdState(System.Object,System.EventArgs)">
            <summary>
            Called when the state of the commands need to be refreshed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.Book">
            <summary>Handle the book opening.</summary>
        </member>
        <member name="T:SrcChess2.Book.BookEntry">
            <summary>Entry in the book entries</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Pos">
            <summary>Position of this entry (Start + (End * 256))</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Size">
            <summary>How many move for this entry at the index</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Index">
            <summary>Index in the table for the entry</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Weight">
            <summary>How many child book entries this one has</summary>
        </member>
        <member name="T:SrcChess2.Book.CompareShortArray">
            <summary>Comparer use to sort array of short</summary>
        </member>
        <member name="M:SrcChess2.Book.CompareShortArray.Compare(System.Int16[],System.Int16[])">
            <summary>
            Comparer of Array of short
            </summary>
            <param name="x">    First move list</param>
            <param name="y">    Second move list</param>
            <returns>
            -1 if g1 less than g2, 1  if g1 greater than g2, 0 if g1 = g2
            </returns>
        </member>
        <member name="F:SrcChess2.Book.m_bookEntries">
            <summary>List of book entries</summary>
        </member>
        <member name="M:SrcChess2.Book.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ComputeWeight(System.Int32)">
            <summary>
            Compute the number of child for each child moves
            </summary>
            <param name="iParent">  Parent move</param>
            <returns>
            Nb of child
            </returns>
        </member>
        <member name="M:SrcChess2.Book.ComputeWeight">
            <summary>
            Compute the number of child for each child moves
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromReader(System.IO.BinaryReader)">
            <summary>
            Read the book from a binary file
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromFile(System.String)">
            <summary>
            Read the book from a binary file
            </summary>
            <param name="strFileName">  File Name</param>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Read the book from the specified resource
            </summary>
            <param name="asm">          Assembly</param>
            <param name="strResName">   Resource Name</param>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromResource(System.String)">
            <summary>
            Read the book from the specified resource
            </summary>
            <param name="strResName">   Resource Name</param>
        </member>
        <member name="M:SrcChess2.Book.SaveBookToFile(System.String)">
            <summary>
            Save the book to a binary file
            </summary>
        </member>
        <member name="M:SrcChess2.Book.FindMoveInBook(SrcChess2.MoveExt[],System.Random)">
            <summary>
            Find a move from the book
            </summary>
            <param name="arrPreviousMove">  List of previous moves</param>
            <param name="rnd">              Random to use to pickup a move from a list. Can be null</param>
            <returns>
            Move in the form of StartPos + (EndPos * 256) or -1 if none found
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CompareList(System.Int16[],System.Int16[],System.Int32)">
            <summary>
            Compare the begining of two lists
            </summary>
            <param name="pnFirst">      First list</param>
            <param name="pnSecond">     Second list</param>
            <param name="iMaxDepth">    Maximum depth to compare</param>
            <returns>
            true if begining is equal
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CompareKey(System.Int16[],System.Collections.Generic.List{System.Int16})">
            <summary>
            Compare a key with a move list
            </summary>
            <param name="pnMoveList">   Move list</param>
            <param name="arrKey">       Key to compare</param>
            <returns>
            true if equal
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateEntries(System.Collections.Generic.List{System.Int16[]},System.Collections.Generic.List{SrcChess2.Book.BookEntry},System.Collections.Generic.List{System.Int16},System.Int32@,System.Int32,SrcChess2.PgnParser.delProgressCallBack,System.Object)">
            <summary>
            Create entries in the book
            </summary>
            <param name="arrMoveList">  Array of move list</param>
            <param name="arrBookEntry"> Book entry to be filled</param>
            <param name="arrKey">       Current key</param>
            <param name="iPosIndex">    Current position in the list</param>
            <param name="iDepth">       Current depth.</param>
            <param name="callback">     Callback to call to show progress</param>
            <param name="cookie">       Cookie for callback</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateBookList(System.Collections.Generic.List{System.Int16[]},System.Int32,SrcChess2.PgnParser.delProgressCallBack,System.Object)">
            <summary>
            Create the book entries from a series of move list
            </summary>
            <param name="arrMoveList">      Array of move list</param>
            <param name="iMaxDepth">        Maximum depth of the moves.</param>
            <param name="callback">         Callback to call to show progress</param>
            <param name="cookie">           Cookie for callback</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateBookList(System.Collections.Generic.List{System.Int16[]},System.Int32,System.Int32,SrcChess2.PgnParser.delProgressCallBack,System.Object)">
            <summary>
            Create the book entries from a series of move list
            </summary>
            <param name="listMoveList">     List of PGN games</param>
            <param name="iMinMoveCount">    Minimum number of moves a move list must have to be consider</param>
            <param name="iMaxDepth">        Maximum depth of the moves.</param>
            <param name="callback">         Callback to call to show progress</param>
            <param name="cookie">           Cookie for callback</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="T:SrcChess2.ChessBoard">
            <summary>Implementation of the chess board without any user interface.</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.PlayerE">
            <summary>Player color (black and white)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PlayerE.White">
            <summary>White player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PlayerE.Black">
            <summary>Black player</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.SerPieceE">
            <summary>Same as PieceE, but easier serialization.</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.Empty">
            <summary>No piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhitePawn">
            <summary>Pawn</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhiteKnight">
            <summary>Knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhiteBishop">
            <summary>Bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhiteRook">
            <summary>Rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhiteQueen">
            <summary>Queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.WhiteKing">
            <summary>King</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.NotUsed1">
            <summary>Not used</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.NotUsed2">
            <summary>Not used</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackPawn">
            <summary>Pawn</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackKnight">
            <summary>Knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackBishop">
            <summary>Bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackRook">
            <summary>Rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackQueen">
            <summary>Queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.BlackKing">
            <summary>King</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.SerPieceE.NotUsed3">
            <summary>Not used</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.PieceE">
            <summary>Value of each piece on the board. Each piece is a combination of piece value and color (0 for white, 8 for black)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.None">
            <summary>No piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Pawn">
            <summary>Pawn</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Knight">
            <summary>Knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Bishop">
            <summary>Bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Rook">
            <summary>Rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Queen">
            <summary>Queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.King">
            <summary>King</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.PieceMask">
            <summary>Mask to find the piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Black">
            <summary>Piece is black</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.White">
            <summary>White piece</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.ValidPawnPromotionE">
            <summary>List of valid pawn promotion</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.None">
            <summary>No valid promotion</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Queen">
            <summary>Promotion to queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Rook">
            <summary>Promotion to rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Bishop">
            <summary>Promotion to bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Knight">
            <summary>Promotion to knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Pawn">
            <summary>Promotion to pawn</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.BoardStateMaskE">
            <summary>Mask for board extra info</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.EnPassant">
            <summary>0-63 to express the EnPassant possible position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BlackToMove">
            <summary>black player is next to move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.WLCastling">
            <summary>white left castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.WRCastling">
            <summary>white right castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BLCastling">
            <summary>black left castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BRCastling">
            <summary>black right castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BoardRepMask">
            <summary>Mask use to save the number of times the board has been repeated</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.RepeatResultE">
            <summary>Any repetition causing a draw?</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.NoRepeat">
            <summary>No repetition found</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.ThreeFoldRepeat">
            <summary>3 times the same board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.FiftyRuleRepeat">
            <summary>50 times without moving a pawn or eating a piece</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.GameResultE">
            <summary>Result of the current board. Game is finished unless OnGoing or Check</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.OnGoing">
            <summary>Game is going on</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.ThreeFoldRepeat">
            <summary>3 times the same board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.FiftyRuleRepeat">
            <summary>50 times without moving a pawn or eating a piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.TieNoMove">
            <summary>No more move for the next player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.TieNoMatePossible">
            <summary>Not enough pieces to do a check mate</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.Check">
            <summary>Check</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.GameResultE.Mate">
            <summary>Checkmate</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.PosInfoS">
            <summary>
            Position information. Positive value for white player, negative value for black player.
            All these informations are computed before the last move to improve performance.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.PosInfoS.#ctor(System.Int32,System.Int32)">
            <summary>
            Class Ctor
            </summary>
            <param name="iAttackedPieces">  Number of pieces attacking this position</param>
            <param name="iPiecesDefending"> Number of pieces defending this position</param>
        </member>
        <member name="F:SrcChess2.ChessBoard.PosInfoS.m_iAttackedPieces">
            <summary>Number of pieces being attacked by player's pieces</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PosInfoS.m_iPiecesDefending">
            <summary>Number of pieces defending player's pieces</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_posInfoNull">
            <summary>NULL position info</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveDiagLine">
            <summary>Possible diagonal or linear moves for each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveDiagonal">
            <summary>Possible diagonal moves for each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveLine">
            <summary>Possible linear moves for each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseMoveKnight">
            <summary>Possible knight moves for each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseMoveKing">
            <summary>Possible king moves for each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseBlackPawnCanAttackFrom">
            <summary>Possible board positions a black pawn can attack from each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseWhitePawnCanAttackFrom">
            <summary>Possible board positions a white pawn can attack from each board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_pBoard">
            <summary>Chess board</summary>
            63 62 61 60 59 58 57 56
            55 54 53 52 51 50 49 48
            47 46 45 44 43 42 41 40
            39 38 37 36 35 34 33 32
            31 30 29 28 27 26 25 24
            23 22 21 20 19 18 17 16
            15 14 13 12 11 10 9  8
            7  6  5  4  3  2  1  0
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iBlackKingPos">
            <summary>Position of the black king</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iWhiteKingPos">
            <summary>Position of the white king</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_piPiecesCount">
            <summary>Number of pieces of each kind/color</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_rnd">
            <summary>Random number generator</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_rndRep">
            <summary>Random number generator (repetitive, seed = 0)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iRBlackRookMoveCount">
            <summary>Number of time the right black rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iLBlackRookMoveCount">
            <summary>Number of time the left black rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iBlackKingMoveCount">
            <summary>Number of time the black king has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iRWhiteRookMoveCount">
            <summary>Number of time the right white rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iLWhiteRookMoveCount">
            <summary>Number of time the left white rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iWhiteKingMoveCount">
            <summary>Number of time the white king has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bWhiteCastle">
            <summary>White has castle if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bBlackCastle">
            <summary>Black has castle if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iPossibleEnPassantAt">
            <summary>Position behind the pawn which had just been moved from 2 positions</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_stackPossibleEnPassantAt">
            <summary>Stack of m_iPossibleEnPassantAt values</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_i64ZobristKey">
            <summary>Current zobrist key value. Probably unique for the current board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_trace">
            <summary>Object where to redirect the trace if any</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_moveHistory">
            <summary>Move history use to handle the fifty-move rule and the threefold repetition rule.</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bDesignMode">
            <summary>The board is in design mode if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_moveStack">
            <summary>Stack of moves since the initial board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_eCurrentPlayer">
            <summary>Player making the next move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bStdInitialBoard">
            <summary>true if the initial board is the standard one</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_posInfo">
            <summary>Information about pieces attack</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_book">
            <summary>Opening book to use if any</summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#cctor">
            <summary>
            Class static constructor. 
            Builds the list of possible moves for each piece type per position.
            Etablished the value of each type of piece for board evaluation.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetAccessibleSquares(System.Int32,System.Collections.Generic.List{System.Int32[]},System.Int32[],System.Boolean)">
            <summary>
            Get all squares which can be access by a specific piece positioned at iSquarePos
            </summary>
            <param name="iSquarePos">   Square position of the piece</param>
            <param name="arrSquare">    Array of square accessable by the piece</param>
            <param name="arrDelta">     List of delta (in tuple) used to list the accessible position</param>
            <param name="bRepeat">      True for Queen, Rook and Bishop. False for Knight, King and Pawn</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor">
            <summary>
            Class constructor. Build a board.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor(SrcChess2.SearchEngine.ITrace)">
            <summary>
            Class constructor. Build a board.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor(SrcChess2.ChessBoard)">
            <summary>
            Class constructor. Use to create a new clone
            </summary>
            <param name="chessBoard">   Board to copy from</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CopyFrom(SrcChess2.ChessBoard)">
            <summary>
            Copy the state of the board from the specified one.
            </summary>
            <param name="chessBoard">   Board to copy from</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.Clone">
            <summary>
            Clone the current board
            </summary>
            <returns>
            New copy of the board
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Returns the XML serialization schema
            </summary>
            <returns>
            null
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Initialize the object using the specified XML reader
            </summary>
            <param name="reader">   XML reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Save the object into the XML writer
            </summary>
            <param name="writer">   XML writer</param>
        </member>
        <member name="P:SrcChess2.ChessBoard.MovePosStack">
            <summary>
            Stack of all moves done since initial board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.MoveHistory">
            <summary>
            Get the move history which handle the fifty-move rule and the threefold repetition rule
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.ComputeBoardExtraInfo(SrcChess2.ChessBoard.PlayerE,System.Boolean)">
            <summary>
            Compute extra information about the board
            </summary>
            <param name="ePlayerToMove">        Player color to move</param>
            <param name="bAddRepetitionInfo">   true to add board repetition information</param>
            <returns>
            Extra information about the board to discriminate between two boards with sames pieces but
            different setting.
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ResetInitialBoardInfo(SrcChess2.ChessBoard.PlayerE,System.Boolean,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32)">
            <summary>
            Reset initial board info
            </summary>
            <param name="eNextMoveColor">   Next color moving</param>
            <param name="bInitialBoardStd"> true if its a standard board, false if coming from FEN or design mode</param>
            <param name="eMask">            Extra bord information</param>
            <param name="iEnPassant">       Position for en passant</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.ResetBoard">
            <summary>
            Reset the board to the initial configuration
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.SaveBoard(System.IO.BinaryWriter)">
            <summary>
            Save the content of the board into the specified binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.LoadBoard(System.IO.BinaryReader)">
            <summary>
            Load the content of the board into the specified stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.MoveExt},SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eStartingColor">       Board starting color</param>
        </member>
        <member name="P:SrcChess2.ChessBoard.DesignMode">
            <summary>
            Determine if the board is in design mode
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.OpenDesignMode">
            <summary>
            Open the design mode
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.CloseDesignMode(SrcChess2.ChessBoard.PlayerE,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32)">
            <summary>
            Try to close the design mode.
            </summary>
            <param name="eNextMoveColor">   Color of the next move</param>
            <param name="eBoardMask">       Board extra information</param>
            <param name="iEnPassant">       Position of en passant or 0 if none</param>
            <returns>
            true if succeed, false if board is invalid
            </returns>
        </member>
        <member name="P:SrcChess2.ChessBoard.StandardInitialBoard">
            <summary>
            true if the board is standard, false if initialized from design mode or FEN
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.UpdatePackedBoardAndZobristKey(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the packed board representation and the value of the hash key representing the current board state.
            </summary>
            <param name="iPos1">        Position of the change</param>
            <param name="eNewPiece1">   New piece</param>
        </member>
        <member name="P:SrcChess2.ChessBoard.CurrentZobristKey">
            <summary>
            Current Zobrist key value
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.UpdatePackedBoardAndZobristKey(System.Int32,SrcChess2.ChessBoard.PieceE,System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the packed board representation and the value of the hash key representing the current board state. Use if two
            board positions are changed.
            </summary>
            <param name="iPos1">        Position of the change</param>
            <param name="eNewPiece1">   New piece</param>
            <param name="iPos2">        Position of the change</param>
            <param name="eNewPiece2">   New piece</param>
        </member>
        <member name="P:SrcChess2.ChessBoard.CurrentPlayer">
            <summary>
            Player which play next
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.LastMovePlayer">
            <summary>
            Player which did the last move
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.Item(System.Int32)">
            <summary>
            Get a piece at the specified position. Position 0 = Lower right (H1), 63 = Higher left (A8)
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetEatedPieceCount(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Get the number of the specified piece which has been eated
            </summary>
            <param name="ePiece">   Piece and color</param>
            <returns>
            Count
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.CheckIntegrity">
            <summary>
            Check the integrity of the board. Use for debugging.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.DoMoveNoLog(SrcChess2.Move)">
            <summary>
            Do the move (without log)
            </summary>
            <param name="move">     Move to do</param>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoMoveNoLog(SrcChess2.Move)">
            <summary>
            Undo a move (without log)
            </summary>
            <param name="move">     Move to undo</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsEnoughPieceForCheckMate">
            <summary>
            Check if there is enough pieces to make a check mate
            </summary>
            <returns>
            true            Yes
            false           No
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetCurrentResult(SrcChess2.ChessBoard.RepeatResultE)">
            <summary>
            Gets the current board result
            </summary>
            <returns>
            NoRepeat        Yes
            Check           Yes, but the user is currently in check
            Tie             No, no move for the user
            Mate            No, user is checkmate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetCurrentResult">
            <summary>
            Checks the current board result
            </summary>
            <returns>
            Board result
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.DoMove(SrcChess2.MoveExt)">
            <summary>
            Do the move
            </summary>
            <param name="move"> Move to do</param>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoMove">
            <summary>
            Undo a move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.RedoMove">
            <summary>
            Redo a move
            </summary>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.SetUndoRedoPosition(System.Int32)">
            <summary>
            SetUndoRedoPosition:    Set the Undo/Redo position
            </summary>
            <param name="iPos">     New position</param>
        </member>
        <member name="P:SrcChess2.ChessBoard.WhitePieceCount">
            <summary>
            Gets the number of white pieces on the board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.BlackPieceCount">
            <summary>
            Gets the number of black pieces on the board
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumTheseAttackPos(System.Collections.Generic.List{System.Byte},System.Int32[][],SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Enumerates the attacking position using arrays of possible position and two possible enemy pieces
            </summary>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <param name="ppiCaseMoveList">  Array of array of position.</param>
            <param name="ePiece1">          Piece which can possibly attack this position</param>
            <param name="ePiece2">          Piece which can possibly attack this position</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumTheseAttackPos(System.Collections.Generic.List{System.Byte},System.Int32[],SrcChess2.ChessBoard.PieceE)">
            <summary>
            Enumerates the attacking position using an array of possible position and one possible enemy piece
            </summary>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <param name="piCaseMoveList">   Array of position.</param>
            <param name="ePiece">           Piece which can possibly attack this position</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumAttackPos(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Collections.Generic.List{System.Byte})">
            <summary>
            Enumerates all position which can attack a given position
            </summary>
            <param name="ePlayerColor">     Position to check for black or white</param>
            <param name="iPos">             Position to check.</param>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsCheck(SrcChess2.ChessBoard.PlayerE,System.Int32)">
            <summary>
            Determine if the specified king is attacked
            </summary>
            <param name="eColor">           King's color to check</param>
            <param name="iKingPos">         Position of the king</param>
            <returns>
            true if in check
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsCheck(SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Determine if the specified king is attacked
            </summary>
            <param name="eColor">           King's color to check</param>
            <returns>
            true if in check
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.Points(SrcChess2.SearchMode,SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerToPlay">    Color of the player to play</param>
            <param name="iDepth">           Depth of the search</param>
            <param name="iMoveCountDelta">  White move count - Black move count</param>
            <param name="posInfoWhite">     Information about pieces attack</param>
            <param name="posInfoBlack">     Information about pieces attack</param>
            <returns>
            Number of points for the current board
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddIfNotCheck(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,SrcChess2.Move.TypeE,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Add a move to the move list if the move doesn't provokes the king to be attacked.
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="eType">            type of the move</param>
            <param name="listMovePos">      List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddPawnPromotionIfNotCheck(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Add a pawn promotion series of moves to the move list if the move doesn't provokes the king to be attacked.
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="listMovePos">      List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddMoveIfEnemyOrEmpty(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Add a move to the move list if the new position is empty or is an enemy
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="listMovePos">      List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumCastleMove(SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Enumerates the castling move
            </summary>
            <param name="ePlayerColor"> Color doing the the move</param>
            <param name="listMovePos">  List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumPawnMove(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Enumerates the move a specified pawn can do
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Pawn position</param>
            <param name="listMovePos">      List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumEnPassant(SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Enumerates the en passant move
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="listMovePos">      List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumFromArray(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32[][],System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Enumerates the move a specified piece can do using the pre-compute move array
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="iStartPos">                Starting position</param>
            <param name="ppiMoveListForThisCase">   Array of array of possible moves</param>
            <param name="listMovePos">              List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumFromArray(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32[],System.Collections.Generic.List{SrcChess2.Move})">
            <summary>
            Enumerates the move a specified piece can do using the pre-compute move array
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="iStartPos">                Starting position</param>
            <param name="piMoveListForThisCase">    Array of possible moves</param>
            <param name="listMovePos">              List of moves</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumMoveList(SrcChess2.ChessBoard.PlayerE,System.Boolean,SrcChess2.ChessBoard.PosInfoS@)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="bMoveList">                true to returns a MoveList</param>
            <param name="posInfo">                  Structure to fill with pieces information</param>
            <returns>
            List of possible moves or null
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumMoveList(SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <returns>
            List of possible moves
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ComputePiecesCoverage(SrcChess2.ChessBoard.PlayerE,SrcChess2.ChessBoard.PosInfoS@)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="posInfo">                  Structure to fill with pieces information</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CancelSearch">
            <summary>
            Cancel search
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindBestMove``1(SrcChess2.ChessBoard.PlayerE,SrcChess2.SearchMode,System.Windows.Threading.Dispatcher,System.Action{``0,SrcChess2.MoveExt},``0)">
            <summary>
            Find the best move for the given player
            </summary>
            <param name="ePlayer">          Player making the move</param>
            <param name="searchMode">       Search mode</param>
            <param name="dispatcher">       Main thread dispatcher</param>
            <param name="actionMoveFound">  Action to execute when the best move is found</param>
            <param name="cookie">           Action cookie</param>
            <returns>
            true if search has started, false if search engine is busy
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindValidPawnPromotion(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32)">
            <summary>
            Find type of pawn promotion are valid for the specified starting/ending position
            </summary>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iStartPos">        Position to start</param>
            <param name="iEndPos">          Ending position</param>
            <returns>
            None or a combination of Queen, Rook, Bishop, Knight and Pawn
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindIfValid(SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32)">
            <summary>
            Find a move from the valid move list
            </summary>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iStartPos">        Position to start</param>
            <param name="iEndPos">          Ending position</param>
            <returns>
            Move or -1
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsMoveValid(SrcChess2.ChessBoard.PlayerE,SrcChess2.Move)">
            <summary>
            Find a move from the valid move list
            </summary>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="move">             Move to validate</param>
            <returns>
            true if valid, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsMoveValid(SrcChess2.Move)">
            <summary>
            Find a move from the valid move list
            </summary>
            <param name="move">             Move to validate</param>
            <returns>
            true if valid, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindBookMove(SrcChess2.Book,SrcChess2.SearchMode,SrcChess2.ChessBoard.PlayerE,SrcChess2.MoveExt[],SrcChess2.Move@)">
            <summary>
            Find a move from the opening book
            </summary>
            <param name="book">             Book to use</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="arrPrevMove">      Previous move</param>
            <param name="move">             Found move</param>
            <returns>
            true if succeed, false if no move found in book
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoAllMoves">
            <summary>
            Undo all the specified move starting with the last move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetHumanPos(System.Int32)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="iPos">     Position</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetHumanPos(SrcChess2.MoveExt)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="move">     Move</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="T:SrcChess2.ChessException">
            <summary>Chess exception</summary>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="strError"> Error</param>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.String,System.Exception)">
            <summary>
            Class constructor
            </summary>
            <param name="strError"> Error</param>
            <param name="ex">       Inner exception</param>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Ctor
            </summary>
            <param name="info">     Serialization info</param>
            <param name="context">  Streaming context</param>
        </member>
        <member name="T:SrcChess2.MoveExt">
            <summary>
            Defines a valid move with some extension
            </summary>
        </member>
        <member name="F:SrcChess2.MoveExt.m_arrNag">
            <summary>
            List of standard NAG (Numeric Annotation Glyph) $nn)
            </summary>
        </member>
        <member name="F:SrcChess2.MoveExt.m_iNag">
            <summary>Numeric Annotation Glyph</summary>
        </member>
        <member name="M:SrcChess2.MoveExt.#ctor(SrcChess2.ChessBoard.PieceE,System.Int32,System.Int32,SrcChess2.Move.TypeE,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="eOriginalPiece">   Piece which has been eaten if any</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="eType">            Move type</param>
            <param name="strComment">       Move comment</param>
            <param name="iPermutationCount">Number of permutations searched in the find for best move</param>
            <param name="iSearchDepth">     Maximum depth of the search in the find for best move</param>
            <param name="iCacheHit">        Number of cache hit in the find for best move</param>
            <param name="iNag">             Numeric Annotation Glyph</param>
        </member>
        <member name="M:SrcChess2.MoveExt.#ctor(SrcChess2.Move,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="move">             Base move</param>
            <param name="strComment">       Move comment</param>
            <param name="iPermutationCount">Number of permutations searched in the find for best move</param>
            <param name="iSearchDepth">     Maximum depth of the search in the find for best move</param>
            <param name="iCacheHit">        Number of cache hit in the find for best move</param>
            <param name="iNag">             Numeric Annotation Glyph</param>
        </member>
        <member name="M:SrcChess2.MoveExt.#ctor(SrcChess2.Move)">
            <summary>
            Ctor
            </summary>
            <param name="move">             Base move</param>
        </member>
        <member name="F:SrcChess2.MoveExt.Move">
            <summary>
            Associated move
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.TimeToCompute">
            <summary>
            Time for the computer to find this move
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.Comment">
            <summary>
            Move comment
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.PermutationCount">
            <summary>
            Number of permutation searched for finding this move
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.SearchDepth">
            <summary>
            Depth search to find this move
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.CacheHit">
            <summary>
            Number of time a cache hit
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.NAG">
            <summary>
            Move NAG (Numeric Annotation Glyph)
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.NAGDescription">
            <summary>
            NAG Description
            </summary>
        </member>
        <member name="P:SrcChess2.MoveExt.NAGShortDescription">
            <summary>
            NAG Short Description
            </summary>
        </member>
        <member name="T:SrcChess2.MoveItem">
            <summary>
            Move Item
            </summary>
        </member>
        <member name="M:SrcChess2.MoveItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="step">     Move step</param>
            <param name="who">      Who did the move</param>
            <param name="move">     Move</param>
        </member>
        <member name="P:SrcChess2.MoveItem.Step">
            <summary>Step</summary>
        </member>
        <member name="P:SrcChess2.MoveItem.Who">
            <summary>Who did the move</summary>
        </member>
        <member name="P:SrcChess2.MoveItem.Move">
            <summary>Move</summary>
        </member>
        <member name="T:SrcChess2.MoveItemList">
            <summary>List of moves</summary>
        </member>
        <member name="T:SrcChess2.MoveViewer">
            <summary>
            User interface displaying the list of moves
            </summary>
            <summary>
            MoveViewer
            </summary>
        </member>
        <member name="T:SrcChess2.MoveViewer.DisplayModeE">
            <summary>How the move are displayed: Move position (E2-E4) or PGN (e4)</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.DisplayModeE.MovePos">
            <summary>Display move using starting-ending position</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.DisplayModeE.PGN">
            <summary>Use PGN notation</summary>
        </member>
        <member name="T:SrcChess2.MoveViewer.NewMoveSelectedEventArg">
            <summary>Argument for the NewMoveSelected event</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.NewMoveSelectedEventArg.NewIndex">
            <summary>New selected index in the list</summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.NewMoveSelectedEventArg.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="iNewIndex">    New index</param>
        </member>
        <member name="E:SrcChess2.MoveViewer.NewMoveSelected">
            <summary>Called when a move has been selected by the control</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_chessCtl">
            <summary>Chess board control associated with the move viewer</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_eDisplayMode">
            <summary>Display Mode</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_bIgnoreChg">
            <summary>true to ignore change</summary>
        </member>
        <member name="P:SrcChess2.MoveViewer.MoveList">
            <summary>List of moves</summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="P:SrcChess2.MoveViewer.ChessControl">
            <summary>
            Chess board control associated with move viewer
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.GetMoveDesc(SrcChess2.MoveExt)">
            <summary>
            Gets the description of a move
            </summary>
            <param name="move"> Move to describe</param>
            <returns>
            Move description
            </returns>
        </member>
        <member name="M:SrcChess2.MoveViewer.Redisplay">
            <summary>
            Redisplay all the moves using the current setting
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.AddCurrentMove">
            <summary>
            Add the current move of the board
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.SelectCurrentMove">
            <summary>
            Select the current move
            </summary>
        </member>
        <member name="P:SrcChess2.MoveViewer.DisplayMode">
            <summary>
            Display Mode (Position or PGN)
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.Reset">
            <summary>
            Reset the control so it represents the specified chessboard
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.OnNewMoveSelected(SrcChess2.MoveViewer.NewMoveSelectedEventArg)">
            <summary>
            Trigger the NewMoveSelected argument
            </summary>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.listViewMoveList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the user select a move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.PgnLexical">
            <summary>
            Do the lexical analysis of a PGN document
            </summary>
        </member>
        <member name="T:SrcChess2.PgnLexical.TokenTypeE">
            <summary>
            Token type
            </summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_Integer">
            <summary>Integer value</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_String">
            <summary>String value</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_Symbol">
            <summary>Symbol</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_Dot">
            <summary>Single DOT</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_NAG">
            <summary>NAG value</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_OpenSBracket">
            <summary>Openning square bracket</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_CloseSBracket">
            <summary>Closing square bracket</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_Termination">
            <summary>Termination symbol</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_UnknownToken">
            <summary>Unknown token</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_Comment">
            <summary>Comment</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.TokenTypeE.TOK_EOF">
            <summary>End of file</summary>
        </member>
        <member name="T:SrcChess2.PgnLexical.Token">
            <summary>
            Token value
            </summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.Token.eType">
            <summary>Token type</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.Token.strValue">
            <summary>Token string value if any</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.Token.iValue">
            <summary>Token integer value if any</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.Token.lStartPos">
            <summary>Token starting position</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.Token.iSize">
            <summary>Token size</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_listBuffer">
            <summary>List of buffers</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_iPosInBuffer">
            <summary>Position in the buffer</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_iPosInList">
            <summary>Position in the list</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_curArray">
            <summary>Current array</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_iCurArraySize">
            <summary>Current array size</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_lCurBasePos">
            <summary>Position within the raw array</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_lTextSize">
            <summary>Text size</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_chrPushed">
            <summary>Pushed character if any</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_bFirstChrInLine">
            <summary>true if at the first character of a line</summary>
        </member>
        <member name="F:SrcChess2.PgnLexical.m_tokPushed">
            <summary>Pushed token</summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.Clear(System.Boolean)">
            <summary>
            Clear all buffers
            </summary>
            <param name="bAllocateEmpty">   true to allocate an empty block</param>
        </member>
        <member name="P:SrcChess2.PgnLexical.CurrentPosition">
            <summary>
            Current position
            </summary>
        </member>
        <member name="P:SrcChess2.PgnLexical.TextSize">
            <summary>
            Text size
            </summary>
        </member>
        <member name="P:SrcChess2.PgnLexical.BufferCount">
            <summary>
            Gets the number of buffer which has been allocated
            </summary>
        </member>
        <member name="P:SrcChess2.PgnLexical.CurrentBufferPos">
            <summary>
            Current buffer position
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.InitFromFile(System.String)">
            <summary>
            Initialize the buffer from a file
            </summary>
            <param name="strInpFileName">   File name to open</param>
            <returns>
            Stream or null if unable to open the file.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.InitFromString(System.String)">
            <summary>
            Initialize from string
            </summary>
            <param name="strText">  Text string</param>
        </member>
        <member name="M:SrcChess2.PgnLexical.ReadInMemory(System.IO.StreamReader)">
            <summary>
            Fill the buffer
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.SelectNextBuffer">
            <summary>
            Select the next buffer in list
            </summary>
            <returns>
            true if succeed, false if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.PeekChr">
            <summary>
            Peek a character
            </summary>
            <returns>
            Character or 0 if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetChrInt">
            <summary>
            Get the next character
            </summary>
            <returns>
            Character or 0 if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.PushChr(System.Char)">
            <summary>
            Push back a character
            </summary>
            <param name="chr">  Character to push</param>
        </member>
        <member name="M:SrcChess2.PgnLexical.SkipSpace">
            <summary>
            Skip whitespace
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.SkipLine">
            <summary>
            Skip the rest of the line
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetChr">
            <summary>
            Get a character
            </summary>
            <returns>
            Character
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetStringAtPos(System.Int64,System.Int32)">
            <summary>
            Gets the string at the specified position
            </summary>
            <param name="lStartingPos"> Starting position in text</param>
            <param name="iLength">      String size</param>
            <returns>
            String or null if bad position specified
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.IsOnlyFEN">
            <summary>
            Returns if the text is probably a single FEN (no more than one line)
            </summary>
            <returns>
            true if probably a single FEN
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.FlushOldBuffer">
            <summary>
            Flush old buffer to save memory
            </summary>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetStringToken">
            <summary>
            Fetch a string token
            </summary>
            <returns>
            String
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetIntegerToken(System.Char)">
            <summary>
            Get an integer
            </summary>
            <returns>
            Integer value
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetSymbolToken(System.Char,System.Boolean@,System.Boolean@)">
            <summary>
            Fetch a symbol token
            </summary>
            <param name="chrFirst">     First character</param>
            <param name="bAllDigit">    true if symbol is only composed of digit</param>
            <param name="bFoundSlash">  Found a slash in the symbol. Only valid for 1/2-1/2</param>
            <returns>
            Symbol
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.GetNextToken">
            <summary>
            Get the next token
            </summary>
            <returns>
            Token
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.AssumeToken(SrcChess2.PgnLexical.TokenTypeE,SrcChess2.PgnLexical.Token)">
            <summary>
            Assume the specified token
            </summary>
            <param name="eType">    Token type</param>
            <param name="tok">      Assumed token</param>
            <returns>
            Token
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.AssumeToken(SrcChess2.PgnLexical.TokenTypeE)">
            <summary>
            Assume the specified token
            </summary>
            <param name="eType">    Token type</param>
            <returns>
            Token
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.PushToken(SrcChess2.PgnLexical.Token)">
            <summary>
            Push back a token
            </summary>
            <returns>
            Token
            </returns>
        </member>
        <member name="M:SrcChess2.PgnLexical.PeekToken">
            <summary>
            Peek a token
            </summary>
            <returns>
            Token
            </returns>
        </member>
        <member name="T:SrcChess2.PgnParserException">
            <summary>Parser exception</summary>
        </member>
        <member name="F:SrcChess2.PgnParserException.CodeInError">
            <summary>Code which is in error</summary>
        </member>
        <member name="F:SrcChess2.PgnParserException.MoveList">
            <summary>Array of move position</summary>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
            <param name="strCodeInError">   Code in error</param>
            <param name="ex">               Inner exception</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
            <param name="strCodeInError">   Code in error</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Unserialize additional data
            </summary>
            <param name="info">     Serialization Info</param>
            <param name="context">  Context Info</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the additional data
            </summary>
            <param name="info">     Serialization Info</param>
            <param name="context">  Context Info</param>
        </member>
        <member name="T:SrcChess2.PgnParser">
            <summary>Class implementing the parsing of a PGN file. PGN is a standard way of recording chess games.</summary>
        </member>
        <member name="T:SrcChess2.PgnParser.ParsingPhaseE">
            <summary>
            Parsing Phase
            </summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.None">
            <summary>No phase set yet</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.OpeningFile">
            <summary>Openning a file</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.ReadingFile">
            <summary>Reading the file content into memory</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.RawParsing">
            <summary>Raw parsing the PGN file</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.CreatingBook">
            <summary>Creating the book</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.ParsingPhaseE.Finished">
            <summary>Processing is finished</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_bJobCancelled">
            <summary>true to cancel the parsing job</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_chessBoard">
            <summary>Board use to play as we decode</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_bDiagnose">
            <summary>true to diagnose the parser. This generate exception when a move cannot be resolved</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_pgnLexical">
            <summary>PGN Lexical Analyser</summary>
        </member>
        <member name="M:SrcChess2.PgnParser.#ctor(System.Boolean)">
            <summary>
            Class Ctor
            </summary>
            <param name="bDiagnose">    true to diagnose the parser</param>
        </member>
        <member name="M:SrcChess2.PgnParser.#ctor(SrcChess2.ChessBoard)">
            <summary>
            Class Ctor
            </summary>
            <param name="chessBoard">   Chessboard to use</param>
        </member>
        <member name="M:SrcChess2.PgnParser.InitFromFile(System.String)">
            <summary>
            Initialize the parser using the content of a PGN file
            </summary>
            <param name="strFileName">  File name</param>
            <returns>true if succeed, false if failed</returns>
        </member>
        <member name="M:SrcChess2.PgnParser.InitFromString(System.String)">
            <summary>
            Initialize the parser using a PGN text
            </summary>
            <param name="strText">  PGN Text</param>
        </member>
        <member name="M:SrcChess2.PgnParser.InitFromPGNBuffer(SrcChess2.PgnLexical)">
            <summary>
            Initialize from a PGN buffer object
            </summary>
            <param name="pgnLexical">    PGN Lexical Analyser</param>
        </member>
        <member name="P:SrcChess2.PgnParser.PGNLexical">
            <summary>
            PGN buffer
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParser.GetCodeInError(System.Int64,System.Int32)">
            <summary>
            Return the code of the current game
            </summary>
            <returns>
            Current game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.GetCodeInError(SrcChess2.PgnLexical.Token)">
            <summary>
            Return the code of the current game
            </summary>
            <param name="tok">  Token</param>
            <returns>
            Current game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.GetCodeInError(SrcChess2.PgnGame)">
            <summary>
            Return the code of the current game
            </summary>
            <param name="pgnGame">    PGN game</param>
            <returns>
            Current game
            </returns>
        </member>
        <member name="T:SrcChess2.PgnParser.delProgressCallBack">
            <summary>
            Callback for 
            </summary>
            <param name="cookie">           Callback cookie</param>
            <param name="ePhase">           Parsing phase OpeningFile,ReadingFile,RawParsing,AnalysingMoves</param>
            <param name="iFileIndex">       File index</param>
            <param name="iFileCount">       Number of files to parse</param>
            <param name="strFileName">      File name</param>
            <param name="iGameProcessed">   Game processed since the last update</param>
            <param name="iGameCount">       Game count</param>
        </member>
        <member name="M:SrcChess2.PgnParser.DecodeMove(SrcChess2.PgnGame,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Decode a move
            </summary>
            <param name="pgnGame">      PGN game</param>
            <param name="strPos">       Position</param>
            <param name="iStartCol">    Returns the starting column found in move if specified (-1 if not)</param>
            <param name="iStartRow">    Returns the starting row found in move if specified (-1 if not)</param>
            <param name="iEndPos">      Returns the ending position of the move</param>
        </member>
        <member name="M:SrcChess2.PgnParser.FindCastling(SrcChess2.PgnGame,SrcChess2.ChessBoard.PlayerE,System.Boolean,System.Int32@,System.String,SrcChess2.MoveExt@)">
            <summary>
            Find a castle move
            </summary>
            <param name="pgnGame">          PGN game</param>
            <param name="ePlayerColor">     Color moving</param>
            <param name="bShortCastling">   true for short, false for long</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="strMove">          Move</param>
            <param name="move">             Returned moved if found</param>
            <returns>
            Moving position (Starting Position + Ending Position * 256) or -1 if error
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.FindPieceMove(SrcChess2.PgnGame,SrcChess2.ChessBoard.PlayerE,SrcChess2.ChessBoard.PieceE,System.Int32,System.Int32,System.Int32,SrcChess2.Move.TypeE,System.String,System.Int32@,SrcChess2.MoveExt@)">
            <summary>
            Find a move using the specification
            </summary>
            <param name="pgnGame">          PGN game</param>
            <param name="ePlayerColor">     Color moving</param>
            <param name="ePiece">           Piece moving</param>
            <param name="iStartCol">        Starting column of the move or -1 if not specified</param>
            <param name="iStartRow">        Starting row of the move or -1 if not specified</param>
            <param name="iEndPos">          Ending position of the move</param>
            <param name="eMoveType">        Type of move. Use for discriminating between different pawn promotion.</param>
            <param name="strMove">          Move</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="move">             Move position</param>
            <returns>
            Moving position (Starting Position + Ending Position * 256) or -1 if error
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.CnvSANMoveToPosMove(SrcChess2.PgnGame,SrcChess2.ChessBoard.PlayerE,System.String,System.Int16@,System.Int32@,SrcChess2.MoveExt@)">
            <summary>
            Convert a SAN position into a moving position
            </summary>
            <param name="pgnGame">          PGN game</param>
            <param name="ePlayerColor">     Color moving</param>
            <param name="strMove">          Move</param>
            <param name="nPos">             Returned moving position (-1 if error, Starting position + Ending position * 256</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="move">             Move position</param>
        </member>
        <member name="M:SrcChess2.PgnParser.CnvSANMoveToPosMove(SrcChess2.PgnGame,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{System.String},System.Int16[]@,System.Collections.Generic.List{SrcChess2.MoveExt},System.Int32@,System.Int32@)">
            <summary>
            Convert a list of SAN positions into a moving positions
            </summary>
            <param name="pgnGame">          PGN game</param>
            <param name="eColorToPlay">     Color to play</param>
            <param name="arrRawMove">       Array of PGN moves</param>
            <param name="pnMoveList">       Returned array of moving position (Starting Position + Ending Position * 256)</param>
            <param name="listMovePos">      Returned the list of move if not null</param>
            <param name="iSkip">            Skipped count</param>
            <param name="iTruncated">       Truncated count</param>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseFEN(System.String,SrcChess2.ChessBoard.PlayerE@,SrcChess2.ChessBoard.BoardStateMaskE@,System.Int32@)">
            <summary>
            Parse FEN definition into a board representation
            </summary>
            <param name="strFEN">           FEN</param>
            <param name="eColorToMove">     Return the color to move</param>
            <param name="eBoardStateMask">  Return the mask of castling info</param>
            <param name="iEnPassant">       Return the en passant position or 0 if none</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseFEN(System.String,SrcChess2.ChessBoard.PlayerE@,SrcChess2.ChessBoard@)">
            <summary>
            Parse FEN definition into a board representation
            </summary>
            <param name="strFEN">           FEN</param>
            <param name="eStartingColor">   Return the color to move</param>
            <param name="chessBoard">       Return the chess board represented by this FEN</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseMoves(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean@)">
            <summary>
            Parse PGN moves
            </summary>
            <param name="listSANMove">  Returned list of attributes for this game. Can be null to skip move section</param>
            <param name="bFEN">         true if FEN present</param>
            <param name="bBadMoveFound">true if a bad move has been found</param>
            <remarks>
                movetext-section        ::= element-sequence game-termination
                element-sequence        ::= {element}
                element                 ::= move-number-indication | SAN-move | numeric-annotation-glyph
                move-number-indication  ::= Integer {'.'}
                recursive-variation     ::= '(' element-sequence ')'
                game-termination        ::= '1-0' | '0-1' | '1/2-1/2' | '*'
             </remarks>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseAttrs(System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Parse PGN attributes
            </summary>
            <param name="attrs">    Returned list of attributes for this game</param>
                tag-section     ::= {tag-pair}
                tag-pair        ::= '[' tag-name tag-value ']'
                tag-name        ::= identifier
                tag-value       ::= string
        </member>
        <member name="M:SrcChess2.PgnParser.ParsePGN(System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Parse a PGN text
            </summary>
            <param name="bAttrList">    Game to be filled with attributes and moves</param>
            <param name="bMoveList">    Game to be filled with attributes and moves</param>
            <param name="bBadMoveFound">true if a bad move has been found</param>
            <returns>
            true if a game has been found, false if none
            </returns>
            <remarks>
                PGN-game        ::= tag-section movetext-section
                tag-section     ::= tag-pair
            </remarks>
        </member>
        <member name="M:SrcChess2.PgnParser.AnalyzePGN(SrcChess2.PgnGame,System.Boolean,System.Boolean,System.Int32@,System.Int32@,System.String@)">
             <summary>
             Analyze the PGN games to find the non-ambiguous move list
             </summary>
             <param name="pgnGame">              Game being analyzed</param>
             <param name="bIgnoreMoveListIfFEN"> Ignore the move list if FEN is found</param>
             <param name="bFillMoveExtList">     Fills the move extended list if true</param>
             <param name="iSkip">                Number of games skipped</param>
             <param name="iTruncated">           Number of games truncated</param>
             <param name="strError">             Error if any</param>
             <returns>
             false if invalid board
             </returns>
             <remarks>
             
             The parser understand an extended version of the [TimeControl] tag:
             
                 [TimeControl "?:123:456"]   where 123 = white tick count, 456 = black tick count (100 nano-sec unit)
            
             The parser also understand the following standard tags:
             
                 [White] [Black] [FEN] [WhiteType] [BlackType]
             
             </remarks>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseIfFENLine(SrcChess2.ChessBoard.PlayerE@,SrcChess2.ChessBoard@)">
            <summary>
            Parse if its a FEN line. FEN have only one line and must have 7 '/' which is highly improbable for a PGN text
            </summary>
            <param name="eStartingColor">   Return the color to move</param>
            <param name="chessBoard">       Return the chessboard represent by this FEN</param>
            <returns>
            true if its a FEN text, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseSingle(System.Boolean,System.Int32@,System.Int32@,SrcChess2.PgnGame@,System.String@)">
            <summary>
            Parse a single PGN/FEN game
            </summary>
            <param name="bIgnoreMoveListIfFEN"> Ignore the move list if FEN is found</param>
            <param name="iSkip">                Number of games skipped</param>
            <param name="iTruncated">           Number of games truncated</param>
            <param name="pgnGame">              Returned PGN game</param>
            <param name="strError">             Error if any</param>
            <returns>
            false if the board specified by FEN is invalid.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.GetAllRawPGN(System.Boolean,System.Boolean,System.Int32@,SrcChess2.PgnParser.delProgressCallBack,System.Object)">
            <summary>
            Gets the list of all raw PGN in the specified text
            </summary>
            <param name="bAttrList">    true to create attributes list</param>
            <param name="bMoveList">    true to create move list</param>
            <param name="iSkippedCount">Number of game which has been skipped because of bad move</param>
            <param name="callback">     Callback</param>
            <param name="cookie">       Cookie for callback</param>
        </member>
        <member name="M:SrcChess2.PgnParser.GetAllRawPGN(System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Gets the list of all raw PGN in the specified text
            </summary>
            <param name="bMoveList">    true to create move list</param>
            <param name="bAttrList">    true to create attributes list</param>
            <param name="iSkippedCount">Number of games skipped because of bad moves</param>
        </member>
        <member name="M:SrcChess2.PgnParser.AnalyzeInParallel(System.Collections.Generic.List{SrcChess2.PgnGame},System.Int32@,System.Int32@,System.Int32,System.String@)">
            <summary>
            Analyze the games in the list in multiple threads
            </summary>
            <param name="pgnGames">     List of games</param>
            <param name="iSkip">        Skip count</param>
            <param name="iTruncated">   Truncated count</param>
            <param name="iThreadCount"> Thread count</param>
            <param name="strError">     Error if any</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseAllPGNMoveList(System.Collections.Generic.List{System.Int16[]},SrcChess2.PgnParser.delProgressCallBack,System.Object,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Parse a PGN text file. The move list are returned as a list of array of int. Each int encoding the starting position in the first 8 bits and the ending position in the second 8 bits
            </summary>
            <param name="listMoveList">         List of moves</param>
            <param name="callback">             Delegate callback (can be null)</param>
            <param name="cookie">               Cookie for the callback</param>
            <param name="iSkip">                Number of games skipped</param>
            <param name="iTruncated">           Number of games truncated</param>
            <param name="strError">             Error if any</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ExtractMoveListFromMultipleFiles(System.String[],System.Boolean,SrcChess2.PgnParser.delProgressCallBack,System.Object,System.Collections.Generic.List{System.Int16[]}@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Parse a series of PGN games
            </summary>
            <param name="arrFileNames">     Array of file name</param>
            <param name="bMinimizeMemory">  true if no need to keep the attributes</param>
            <param name="callback">         Delegate callback (can be null)</param>
            <param name="cookie">           Cookie for the callback</param>
            <param name="listMoveList">     List of move list array</param>
            <param name="iTotalSkipped">    Number of games skipped because of error</param>
            <param name="iTotalTruncated">  Number of games truncated</param>
            <param name="strError">         Returned error if return value is false</param>
            <returns>true if succeed, false if error</returns>
        </member>
        <member name="M:SrcChess2.PgnParser.CancelParsingJob">
            <summary>
            Call to cancel the parsing job
            </summary>
        </member>
        <member name="P:SrcChess2.PgnParser.IsJobCancelled">
            <summary>
            true if job has been cancelled
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParser.ApplySANMoveToBoard(SrcChess2.PgnGame,System.String,SrcChess2.MoveExt@)">
            <summary>
            Apply a SAN move to the board
            </summary>
            <param name="pgnGame">  PGN game</param>
            <param name="strSAN">   SAN move</param>
            <param name="move">     Converted move</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="T:SrcChess2.PlayerTypeE">
            <summary>Type of player (human of computer program)</summary>
        </member>
        <member name="F:SrcChess2.PlayerTypeE.Human">
            <summary>Player is a human</summary>
        </member>
        <member name="F:SrcChess2.PlayerTypeE.Program">
            <summary>Player is a computer program</summary>
        </member>
        <member name="T:SrcChess2.PgnGame">
            <summary>
            PGN raw game. Attributes and undecoded move list
            </summary>
        </member>
        <member name="T:SrcChess2.PgnGame.AttrReadE">
            <summary>
            Attribute which has been read
            </summary>
        </member>
        <member name="F:SrcChess2.PgnGame.StartingPos">
            <summary>Game starting position in the PGN text file</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.Length">
            <summary>Game length in the PGN text file</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.attrs">
            <summary>Attributes</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.sanMoves">
            <summary>Undecoded SAN moves</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_eReadAttr">
            <summary>Read attributes</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strEvent">
            <summary>Event</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strSite">
            <summary>Site of the event</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strGameDate">
            <summary>Date of the game</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strRound">
            <summary>Round</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strWhitePlayer">
            <summary>White Player name</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strBlackPlayer">
            <summary>Black Player name</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_iWhiteELO">
            <summary>White ELO (-1 if none)</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_iBlackELO">
            <summary>Black ELO (-1 if none)</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strGameResult">
            <summary>Game result 1-0, 0-1, 1/2-1/2 or *</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_eWhitePlayerType">
            <summary>White Human/program</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_eBlackPlayerType">
            <summary>White Human/program</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strFEN">
            <summary>FEN defining the board</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strTimeControl">
            <summary>Time control</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_strTermination">
            <summary>Game termination</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_spanWhite">
            <summary>Time span from White player</summary>
        </member>
        <member name="F:SrcChess2.PgnGame.m_spanBlack">
            <summary>Time span from Black player</summary>
        </member>
        <member name="M:SrcChess2.PgnGame.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="bAttrList">    true to create an attribute list</param>
            <param name="bMoveList">    true to create a move list</param>
        </member>
        <member name="P:SrcChess2.PgnGame.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.Site">
            <summary>
            Site
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.Date">
            <summary>
            Date of the game
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.WhitePlayer">
            <summary>
            White Player
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.BlackPlayer">
            <summary>
            Black Player
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.WhiteELO">
            <summary>
            White ELO
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.BlackELO">
            <summary>
            Black ELO
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.GameResult">
            <summary>
            Game Result
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.WhiteType">
            <summary>
            White player type
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.BlackType">
            <summary>
            Black player type
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.FEN">
            <summary>
            FEN defining the board
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.TimeControl">
            <summary>
            Time control
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.Termination">
            <summary>
            Game termination
            </summary>
        </member>
        <member name="M:SrcChess2.PgnGame.InitPlayerSpan">
            <summary>
            Initialize the proprietary time control
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.WhiteSpan">
            <summary>
            Time used by the White player
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.BlackSpan">
            <summary>
            Time used by the Black player
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.MoveList">
            <summary>
            List of moves defines as an integer per move defines as StartingPos + EndingPos * 256
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.MoveExtList">
            <summary>
            List of moves defines as MoveExt object
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.StartingChessBoard">
            <summary>
            Starting chessboard when defined with a FEN
            </summary>
        </member>
        <member name="P:SrcChess2.PgnGame.StartingColor">
            <summary>
            Starting player
            </summary>
        </member>
        <member name="M:SrcChess2.PgnGame.SetDefaultValue">
            <summary>
            Set default value for some properties
            </summary>
        </member>
        <member name="T:SrcChess2.PgnUtil">
            <summary>
            Utility class to help handling PGN files. Help filtering PGN files or creating one from an existing board
            </summary>
        </member>
        <member name="T:SrcChess2.PgnUtil.PGNAmbiguity">
            <summary>
            Used when creating a PGN move
            </summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.PGNAmbiguity.NotFound">
            <summary>No ambiguity in the move. Can use short notation</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.PGNAmbiguity.Found">
            <summary>An ambiguity has been found. More than one move can be found if using short notation</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.PGNAmbiguity.ColMustBeSpecify">
            <summary>Column must be specified to remove ambiguity</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.PGNAmbiguity.RowMustBeSpecify">
            <summary>Row must be specified to remove ambiguity</summary>
        </member>
        <member name="T:SrcChess2.PgnUtil.FilterClause">
            <summary>Information use to filter a PGN file</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllRanges">
            <summary>All ELO rating included if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bIncludesUnrated">
            <summary>Includes unrated games if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_hashRanges">
            <summary>If not all ELO rating included, hash of all ELO which must be included. Each value represent a range (value, value+99)</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllPlayers">
            <summary>All players included if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_hashPlayerList">
            <summary>Hash of all players to include if not all included</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllEnding">
            <summary>Includes all ending if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingWhiteWinning">
            <summary>true to include game winned by white player</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingBlackWinning">
            <summary>true to include game winned by black player</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingDraws">
            <summary>true to include draws game </summary>
        </member>
        <member name="M:SrcChess2.PgnUtil.OpenInpFile(System.String)">
            <summary>
            Open an file for reading
            </summary>
            <param name="strInpFileName">   File name to open</param>
            <returns>
            Stream or null if unable to open the file.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.CreateOutFile(System.String)">
            <summary>
            Creates a new file
            </summary>
            <param name="strOutFileName">   Name of the file to create</param>
            <returns>
            Stream or null if unable to create the file.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.WritePGN(SrcChess2.PgnLexical,System.IO.TextWriter,SrcChess2.PgnGame)">
            <summary>
            Write a PGN game in the specified output stream
            </summary>
            <param name="pgnBuffer">    PGN buffer</param>
            <param name="writer">       Text writer</param>
            <param name="pgnGame">      PGN game</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGameInfo(SrcChess2.PgnGame,System.String@,System.String@)">
            <summary>
            Gets the information about a PGN game
            </summary>
            <param name="rawGame">          Raw PGN game</param>
            <param name="strGameResult">    Result of the game</param>
            <param name="strGameDate">      Date of the game</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.FillFilterList(System.Collections.Generic.List{SrcChess2.PgnGame},System.Collections.Generic.HashSet{System.String},System.Int32@,System.Int32@)">
            <summary>
            Scan the PGN stream to retrieve some informations
            </summary>
            <param name="pgnGames">         PGN games</param>
            <param name="setPlayerList">    Set to be filled with the players list</param>
            <param name="iMinELO">          Minimum ELO found in the games</param>
            <param name="iMaxELO">          Maximum ELO found in the games</param>
            <returns>
            List of raw games without the move list
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.IsRetained(SrcChess2.PgnGame,System.Int32,SrcChess2.PgnUtil.FilterClause)">
            <summary>
            Checks if the specified game must be retained accordingly to the specified filter
            </summary>
            <param name="rawGame">          PGN Raw game</param>
            <param name="iAvgELO">          Game average ELO</param>
            <param name="filterClause">     Filter clause</param>
            <returns>
            true if must be retained
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.FilterPGN(SrcChess2.PgnParser,System.Collections.Generic.List{SrcChess2.PgnGame},System.IO.TextWriter,SrcChess2.PgnUtil.FilterClause)">
            <summary>
            Filter the content of the PGN file in the input stream to fill the output stream
            </summary>
            <param name="pgnParser">        PGN parser</param>
            <param name="rawGames">         List of PGN raw games without move list</param>
            <param name="textWriter">       Output stream. If null, just run to determine the result count.</param>
            <param name="filterClause">     Filter clause</param>
            <returns>
            Number of resulting games.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.CreateSubsetPGN(SrcChess2.PgnParser,System.Collections.Generic.List{SrcChess2.PgnGame},SrcChess2.PgnUtil.FilterClause)">
            <summary>
            Creates a PGN file as a subset of an existing one.
            </summary>
            <param name="pgnParser">    PGN parser</param>
            <param name="pgnGames">     Source PGN games</param>
            <param name="filterClause"> Filter clause</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.CreatePGNSubsets(System.Windows.Window)">
            <summary>
            Creates one or many PGN files as a subset of an existing one.
            </summary>
            <param name="wndParent">    Parent window</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetSquareIDFromPGN(System.String)">
            <summary>
            Gets Square Id from the PGN representation
            </summary>
            <param name="strMove">  PGN square representation.</param>
            <returns>
            square id (0-63)
            PGN representation
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNSquareID(System.Int32)">
            <summary>
            Gets the PGN representation of a square
            </summary>
            <param name="iPos">         Absolute position of the square.</param>
            <returns>
            PGN representation
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.FindMoveAmbiguity(SrcChess2.ChessBoard,SrcChess2.Move,SrcChess2.ChessBoard.PlayerE)">
            <summary>
            Find all moves which end to the same position which can create ambiguity
            </summary>
            <param name="chessBoard">   Chessboard before the move has been done.</param>
            <param name="move">         Move to convert</param>
            <param name="eMovePlayer">  Player making the move</param>
            <returns>
            PGN move
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNMoveFromMove(SrcChess2.ChessBoard,SrcChess2.MoveExt,System.Boolean)">
            <summary>
            Gets a PGN move from a MovePosS structure and a chessboard.
            </summary>
            <param name="chessBoard">       Chessboard before the move has been done.</param>
            <param name="move">             Move to convert</param>
            <param name="bIncludeEnding">   true to include ending</param>
            <returns>
            PGN move
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetFENFromBoard(SrcChess2.ChessBoard)">
            <summary>
            Generates FEN
            </summary>
            <param name="chessBoard">       Actual chess board (after the move)</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNFromBoard(SrcChess2.ChessBoard,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,SrcChess2.PlayerTypeE,SrcChess2.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Generates the PGN representation of the board
            </summary>
            <param name="chessBoard">       Actual chess board (after the move)</param>
            <param name="bIncludeRedoMove"> true to include redo move</param>
            <param name="strEvent">         Event tag</param>
            <param name="strSite">          Site tag</param>
            <param name="strDate">          Date tag</param>
            <param name="strRound">         Round tag</param>
            <param name="strWhitePlayer">   White player's name</param>
            <param name="strBlackPlayer">   Black player's name</param>
            <param name="eWhitePlayerType"> White player's type</param>
            <param name="eBlackPlayerType"> Black player's type</param>
            <param name="spanWhitePlayer">  Timer for the white</param>
            <param name="spanBlackPlayer">  Timer for the black</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNArrayFromMoveList(SrcChess2.ChessBoard)">
            <summary>
            Generates the PGN representation of a series of moves
            </summary>
            <param name="chessBoard">   Actual chess board.</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="T:SrcChess2.PieceSet">
            <summary>
            Defines a set of chess pieces. A piece set is a set of xaml which defines the representation of each pieces
            </summary>
        </member>
        <member name="T:SrcChess2.PieceSet.ChessPiece">
            <summary>
            List of standard pieces
            </summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.None">
            <summary>No Piece</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Pawn">
            <summary>Black Pawn</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Rook">
            <summary>Black Rook</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Bishop">
            <summary>Black Bishop</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Knight">
            <summary>Black Knight</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Queen">
            <summary>Black Queen</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_King">
            <summary>Black King</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Pawn">
            <summary>White Pawn</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Rook">
            <summary>White Rook</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Bishop">
            <summary>White Bishop</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Knight">
            <summary>White Knight</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Queen">
            <summary>White Queen</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_King">
            <summary>White King</summary>
        </member>
        <member name="P:SrcChess2.PieceSet.Name">
            <summary>Name of the piece set</summary>
        </member>
        <member name="M:SrcChess2.PieceSet.#ctor(System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="strName">  Piece set Name</param>
        </member>
        <member name="M:SrcChess2.PieceSet.GetChessPieceFromPiece(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Transform a ChessBoard piece into a ChessPiece enum
            </summary>
            <param name="ePiece"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.PieceSet.LoadPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Load a new piece
            </summary>
            <param name="eChessPiece">  Chess Piece</param>
        </member>
        <member name="P:SrcChess2.PieceSet.Item(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Gets the specified piece
            </summary>
            <param name="ePiece"></param>
            <returns>
            User control expressing the piece
            </returns>
        </member>
        <member name="T:SrcChess2.IBoardEvaluation">
            <summary>Implements a board evaluation methods</summary>
            Board:  63 62 61 60 59 58 57 56
                    55 54 53 52 51 50 49 48
                    47 46 45 44 43 42 41 40
                    39 38 37 36 35 34 33 32
                    31 30 29 28 27 26 25 24
                    23 22 21 20 19 18 17 16
                    15 14 13 12 11 10 9  8
                    7  6  5  4  3  2  1  0
            Each position contains a PieceE enum with PieceE.White or PieceE.Black
            
            m_piPiecesCount[PieceE.Pawn | PieceE.White .. PieceE.King | PieceE.White] for white
            m_piPiecesCount[PieceE.Pawn | PieceE.Black .. PieceE.King | PieceE.Black] for black
            Black and White king position are set using the board position.
            
        </member>
        <member name="P:SrcChess2.IBoardEvaluation.Name">
            <summary>
            Name of the board evaluation method.
            </summary>
        </member>
        <member name="M:SrcChess2.IBoardEvaluation.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white moves - Number of possible black moves</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="T:SrcChess2.MoveHistory">
             <summary>
             Maintains a move history to handle the fifty-move rule and the threefold repetition rule.
             
             For the first rules, we just maintains one move count per series of move which doesn't eat a piece or move a pawn.
             For the second rules, we use two strategies, a fast but unreliable one and a second slower but exact.
            
                 A.  Use two 16KB table of counter address by table[Zobrist key of the board mod 16KB]. Collision can occurs so its
                     only a good indication that the board can be there more than 2 times.
                 B.  Keep a compressed representation of the board in an array to be able to count the number of identical boards.
             
             </summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.IMax50CounterDepth">
            <summary>
            Each pawn can move a maximum of 6 times, there is 31 pieces which can be eaten. So no more than
            127 times the AddCurrentMove can be called with bPawnMoveOrPieceEaten set without undo being done on it</summary>
        </member>
        <member name="T:SrcChess2.MoveHistory.PackedBoard">
            <summary>
            Packed representation of a board. Each long contains 16 pieces (2 per bytes)
            </summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal1">
            <summary>Pieces from square 0-15</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal2">
            <summary>Pieces from square 16-31</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal3">
            <summary>Pieces from square 32-47</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal4">
            <summary>Pieces from square 48-63</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_eInfo">
            <summary>Additional board info</summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.PackedBoard.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save the structure in a binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.PackedBoard.LoadFromStream(System.IO.BinaryReader)">
            <summary>
            Load the structure from a binary reader
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_packedBoardCurrent">
            <summary>Current packed board representation</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iMoveCount">
            <summary>Number of moves in the history</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iPackedBoardArraySize">
            <summary>Size of the packed board array</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrPackedBoard">
            <summary>Array of packed boards</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrHashCount">
            <summary>Array of byte containing the count of each board identified by a Zobrist key.</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iCountMoveDepth">
            <summary>Depth of current count move. Up to IMax50CounterDepth - 1</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrCountMove">
            <summary>Array of count move</summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.#ctor(SrcChess2.MoveHistory)">
            <summary>
            Copy constructor
            </summary>
            <param name="moveHistory">  MoveHistory template</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.Clone">
            <summary>
            Creates a clone of the MoveHistory
            </summary>
            <returns>
            A new clone of the MoveHistory
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Returns the XML schema if any
            </summary>
            <returns>
            null
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize the object from a XML reader
            </summary>
            <param name="reader">   XML reader</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize the object to a XML writer
            </summary>
            <param name="writer">   XML writer</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.LoadFromStream(System.IO.BinaryReader)">
            <summary>
            Load from stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save to stream
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.IsTwoBoardEqual(SrcChess2.MoveHistory.PackedBoard,SrcChess2.MoveHistory.PackedBoard)">
            <summary>
            Determine if two boards are equal
            </summary>
            <param name="board1">   First board</param>
            <param name="board2">   Second board</param>
            <returns>
            true if equal, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.GetBoardCount(SrcChess2.MoveHistory.PackedBoard)">
            <summary>
            Gets the number of time this board is in the history (for the same color)
            </summary>
            <param name="board">    Board</param>
            <returns>
            Count
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.AddCurrentPackedBoard(System.Int64,System.Boolean)">
            <summary>
            Add the current packed board to the history
            </summary>
            <param name="l64ZobristKey">            Zobrist key of the board</param>
            <param name="bPawnMoveOrPieceEaten">    true if a pawn has moved or a piece has been eaten</param>
            <returns>
            Result: NoRepeat, ThreeFoldRepeat or FiftyRuleRepeat
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.CurrentRepeatResult(System.Int64)">
            <summary>
            Add the current packed board to the history
            </summary>
            <param name="l64ZobristKey">    Zobrist key of the board</param>
            <returns>
            Result: NoRepeat, ThreeFoldRepeat or FiftyRuleRepeat
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.GetCurrentBoardCount(System.Int64)">
            <summary>
            Get the current packed board count
            </summary>
            <returns>
            Count
            </returns>
        </member>
        <member name="P:SrcChess2.MoveHistory.GetCurrentHalfMoveClock">
            <summary>
            Gets the current half move count (number of count since a pawn has been moved or a piece eaten)
            </summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.RemoveLastMove(System.Int64)">
            <summary>
            Remove the last move from the history
            </summary>
            <param name="l64ZobristKey">    Zobrist key of the board</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputePackedValue(SrcChess2.ChessBoard.PieceE[],System.Int32)">
            <summary>
            Compute a packed value of 16 pieces
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="iStartPos">            Pieces starting position</param>
            <returns>
            Packed value of the 16 pieces
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputePackedBoard(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Compute the packed representation of a board
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputeCurrentPackedBoard(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Compute the current packed representation of a board
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UnpackBoardValue(System.Int64,SrcChess2.ChessBoard.PieceE[],System.Int32)">
            <summary>
            Unpack a packed board value to a board
            </summary>
            <param name="lVal">                 Packed board value</param>
            <param name="peBoard">              Board array</param>
            <param name="iStartPos">            Offset in the board</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UnpackBoard(SrcChess2.MoveHistory.PackedBoard,SrcChess2.ChessBoard.PieceE[])">
            <summary>
            Unpack a packed board to a board
            </summary>
            <param name="packedBoard">          Packed board</param>
            <param name="peBoard">              Board array</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.Reset(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Reset the move history
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UpdateCurrentPackedBoard(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the current board packing
            </summary>
            <param name="iPos">                 Position of the new piece</param>
            <param name="eNewPiece">            New piece</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UpdateCurrentPackedBoard(SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Update the current board packing
            </summary>
            <param name="eInfo">        Board extra info</param>
        </member>
        <member name="T:SrcChess2.MovePosStack">
            <summary>Maintains the list of moves which has been done on a board. The undo moves are kept up to when a new move is done.</summary>
        </member>
        <member name="F:SrcChess2.MovePosStack.m_listMovePos">
            <summary>List of move position</summary>
        </member>
        <member name="F:SrcChess2.MovePosStack.m_iPosInList">
            <summary>Position of the current move in the list</summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.#ctor(SrcChess2.MovePosStack)">
            <summary>
            Class constructor (copy constructor)
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.Clone">
            <summary>
            Clone the stack
            </summary>
            <returns>
            Move list
            </returns>
        </member>
        <member name="M:SrcChess2.MovePosStack.SaveToWriter(System.IO.BinaryWriter)">
            <summary>
            Save to the specified binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.LoadFromReader(System.IO.BinaryReader)">
            <summary>
            Load from reader
            </summary>
            <param name="reader">   Binary Reader</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.GetSchema">
            <summary>
            Returns the XML schema if any
            </summary>
            <returns>
            null
            </returns>
        </member>
        <member name="M:SrcChess2.MovePosStack.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize from XML
            </summary>
            <param name="reader">   XML reader</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize the move list to an XML writer
            </summary>
            <param name="writer">   XML writer</param>
        </member>
        <member name="P:SrcChess2.MovePosStack.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.List">
            <summary>
            Get the list of moves
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.AddMove(SrcChess2.MoveExt)">
            <summary>
            Add a move to the stack. All redo move are discarded
            </summary>
            <param name="move"> New move</param>
        </member>
        <member name="P:SrcChess2.MovePosStack.CurrentMove">
            <summary>
            Current move (last done move)
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.NextMove">
            <summary>
            Next move in the redo list
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.MoveToNext">
            <summary>
            Move to next move
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.MoveToPrevious">
            <summary>
            Move to previous move
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.PositionInList">
            <summary>
            Current move index
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.Clear">
            <summary>
            Removes all move in the list
            </summary>
        </member>
        <member name="T:SrcChess2.PieceSetStandard">
            <summary>
            Piece Set included in the assembly
            </summary>
        </member>
        <member name="F:SrcChess2.PieceSetStandard.m_strBasePath">
            <summary>Base Path of the resource</summary>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.#ctor(System.String,System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="strName">      Piece set Name</param>
            <param name="strBasePath">  Base path in the assembly for this piece set</param>
            
        </member>
        <member name="M:SrcChess2.PieceSetStandard.NameFromChessPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Gets the pieces name as defined in the assembly
            </summary>
            <param name="ePiece">   Piece</param>
            <returns>
            Piece name
            </returns>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.LoadPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Load the specified piece from BAML
            </summary>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.LoadPieceSetFromResource">
            <summary>
            Load piece sets from resource
            </summary>
            <returns></returns>
        </member>
        <member name="T:SrcChess2.SearchEngine">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="T:SrcChess2.SearchEngine.ITrace">
            <summary>Interface to implement to do a search</summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.ITrace.TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerE,SrcChess2.Move,System.Int32)">
            <summary>
            Search trace
            </summary>
            <param name="iDepth">       Depth of the move</param>
            <param name="ePlayerColor"> Player's color</param>
            <param name="movePos">      Move position</param>
            <param name="iPts">         Points for the board</param>
        </member>
        <member name="F:SrcChess2.SearchEngine.s_searchEngineWorking">
            <summary>Working search engine</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.s_transTable">
            <summary>Translation table</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.s_bCancelSearch">
            <summary>true to cancel the search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_trace">
            <summary>Object where to redirect the trace if any</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_rnd">
            <summary>Random number generator</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_rndRep">
            <summary>Random number generator (repetitive, seed = 0)</summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngine.TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerE,SrcChess2.Move,System.Int32)">
            <summary>
            Debugging routine
            </summary>
            <param name="iDepth">       Actual search depth</param>
            <param name="ePlayerColor"> Color doing the move</param>
            <param name="move">         Move</param>
            <param name="iPts">         Points for this move</param>
        </member>
        <member name="M:SrcChess2.SearchEngine.CancelSearch">
            <summary>
            Cancel the search
            </summary>
        </member>
        <member name="P:SrcChess2.SearchEngine.IsSearchEngineBusy">
            <summary>
            Return true if search engine is busy
            </summary>
        </member>
        <member name="P:SrcChess2.SearchEngine.IsSearchHasBeenCanceled">
            <summary>
            Return true if the search has been canceled
            </summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.SortMoveList(System.Collections.Generic.List{SrcChess2.Move},System.Int32[])">
            <summary>
            Sort move list using the specified point array so the highest point move come first
            </summary>
            <param name="moveList"> Source move list to sort</param>
            <param name="arrPoints">Array of points for each move</param>
            <returns>
            Sorted move list
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngine.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.Move@,System.Int32@,System.Int64@,System.Int32@)">
            <summary>
            Find the best move using a specific search method
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="transTable">       Translation table or null if none</param>
            <param name="ePlayer">          Player doing the move</param>
            <param name="moveList">         Move list</param>
            <param name="arrIndex">         Order of evaluation of the moves</param>
            <param name="posInfo">          Position information</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="lCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth to use</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngine.FindBestMove``1(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Windows.Threading.Dispatcher,System.Action{``0,SrcChess2.MoveExt},``0)">
            <summary>
            Find the best move for a player using a specific method
            </summary>
            <param name="board">            Board</param>
            <param name="searchMode">       Search mode</param>
            <param name="transTable">       Translation table or null if none</param>
            <param name="ePlayer">          Player making the move</param>
            <param name="dispatcher">       Dispatcher of the main thread if function is called on a background thread</param>
            <param name="actionFoundMove">  Action to call with the found move</param>
            <param name="cookie">           Cookie to pass to the action</param>
        </member>
        <member name="M:SrcChess2.SearchEngine.FindBestMove``1(SrcChess2.SearchEngine.ITrace,System.Random,System.Random,SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.ChessBoard.PlayerE,System.Windows.Threading.Dispatcher,System.Action{``0,SrcChess2.MoveExt},``0)">
            <summary>
            Find the best move for the given player
            </summary>
            <param name="trace">            Trace object or null</param>
            <param name="rnd">              Random object</param>
            <param name="rndRep">           Repetitive random object</param>
            <param name="board">            Board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayer">          Player making the move</param>
            <param name="dispatcher">       Main thread dispatcher</param>
            <param name="actionMoveFound">  Action to execute when the find best move routine is done</param>
            <param name="cookie">           Cookie to pass to the actionMoveFound action</param>
            <returns>
            true if search has started, false if search engine is busy
            </returns>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult">
            <summary>Result from AlphaBeta calling</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.movePosBest">
            <summary>Best move found</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iPts">
            <summary>Point given for this move</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iPermCount">
            <summary>Number of tried permutation</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iMaxDepth">
            <summary>Maximum search depth</summary>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo">
            <summary>Private class use to pass info at AlphaBeta decreasing the stack space use</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_transTable">
            <summary>Transposition table</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_dtTimeOut">
            <summary>Time before timeout. Use for iterative</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_iPermCount">
            <summary>Number of board evaluated</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_arrMove">
            <summary>Array of move position per depth</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_iMaxDepth">
            <summary>Maximum depth to search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_searchMode">
            <summary>Search mode</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_posInfoWhite">
            <summary>Information about pieces attacks</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_posInfoBlack">
            <summary>Information about pieces attacks</summary>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.AlphaBeta(SrcChess2.ChessBoard,SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo)">
            <summary>
            Alpha Beta pruning function.
            </summary>
            <param name="board">            Chess board</param>
            <param name="ePlayer">          Color doing the move</param>
            <param name="iDepth">           Actual search depth</param>
            <param name="iAlpha">           Alpha limit</param>
            <param name="iBeta">            Beta limit</param>
            <param name="iWhiteMoveCount">  Number of moves white can do</param>
            <param name="iBlackMoveCount">  Number of moves black can do</param>
            <param name="abInfo">           Supplemental information</param>
            <returns>
            Points to give for this move or Int32.MinValue for timed out
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMoveUsingAlphaBetaAtDepth(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32@,System.Int32@,System.Boolean@,System.Int32[]@)">
            <summary>
            Find the best move for a player using alpha-beta for a given depth
            </summary>
            <param name="board">            Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="transTable">       Transposition table or null if not using one</param>
            <param name="ePlayer">          Color doing the move</param>
            <param name="moveList">         List of move to try</param>
            <param name="posInfoWhite">     Information about pieces attacks for the white</param>
            <param name="posInfoBlack">     Information about pieces attacks for the black</param>
            <param name="iTotalMoveCount">  Total list of moves</param>
            <param name="iDepth">           Maximum depth</param>
            <param name="iAlpha">           Alpha bound</param>
            <param name="iBeta">            Beta bound</param>
            <param name="dtTimeOut">        Time limit (DateTime.MaxValue for no time limit)</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iBestMoveIndex">   Index of the best move</param>
            <param name="bTimeOut">         Return true if time out</param>
            <param name="arrPoints">        Returns point of each move in move list</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMoveUsingAlphaBetaAsync(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the best move for a player using alpha-beta in a secondary thread
            </summary>
            <param name="board">            Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="transTable">       Transposition table or null if not using one</param>
            <param name="ePlayer">          Color doing the move</param>
            <param name="moveList">         List of move to try</param>
            <param name="posInfoWhite">     Information about pieces attacks for the white</param>
            <param name="posInfoBlack">     Information about pieces attacks for the black</param>
            <param name="iTotalMoveCount">  Total number of moves</param>
            <param name="iAlpha">           Alpha bound</param>
            <param name="iBeta">            Beta bound</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.Move@,System.Int32@,System.Int64@,System.Int32@)">
            <summary>
            Find the best move for a player using alpha-beta
            </summary>
            <param name="board">        Chess board</param>
            <param name="searchMode">   Search mode</param>
            <param name="transTable">   Transposition table or null if not using one</param>
            <param name="ePlayer">      Player doing the move</param>
            <param name="moveList">     Move list</param>
            <param name="arrIndex">     Order of evaluation of the moves</param>
            <param name="posInfo">      Information about pieces attacks</param>
            <param name="moveBest">     Best move found</param>
            <param name="iPermCount">   Total permutation evaluated</param>
            <param name="lCacheHit">    Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">    Maximum depth to use</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="T:SrcChess2.SearchEngineMinMax">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.MinMax(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.ChessBoard.PlayerE,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Minimum/maximum depth first search
            </summary>
            <param name="board">            Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayer">          Player doing the move</param>
            <param name="iDepth">           Actual search depth</param>
            <param name="iWhiteMoveCount">  Number of moves white can do</param>
            <param name="iBlackMoveCount">  Number of moves black can do</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <returns>
            Points to give for this move
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.FindBestMoveUsingMinMaxAtDepth(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},System.Int32[],System.Int32,SrcChess2.Move@,System.Int32@)">
            <summary>
            Find the best move for a player using minmax search
            </summary>
            <param name="board">        Chess board</param>
            <param name="searchMode">   Search mode</param>
            <param name="ePlayer">      Color doing the move</param>
            <param name="moveList">     Move list</param>
            <param name="arrIndex">     Order of evaluation of the moves</param>
            <param name="iDepth">       Maximum depth</param>
            <param name="moveBest">     Best move found</param>
            <param name="iPermCount">   Total permutation evaluated</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchMode,SrcChess2.TransTable,SrcChess2.ChessBoard.PlayerE,System.Collections.Generic.List{SrcChess2.Move},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.Move@,System.Int32@,System.Int64@,System.Int32@)">
            <summary>
            Find the best move for a player using minmax search
            </summary>
            <param name="board">        Chess board</param>
            <param name="searchMode">   Search mode</param>
            <param name="transTable">   Translation table if any</param>
            <param name="ePlayer">      Color doing the move</param>
            <param name="moveList">     Move list</param>
            <param name="arrIndex">     Order of evaluation of the moves</param>
            <param name="posInfo">      Information about pieces attacks</param>
            <param name="moveBest">     Best move found</param>
            <param name="iPermCount">   Nb of permutations evaluated</param>
            <param name="lCacheHit">    Nb of cache hit</param>
            <param name="iMaxDepth">    Maximum depth evaluated</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="T:SrcChess2.SearchMode">
            <summary>Search Options</summary>
        </member>
        <member name="T:SrcChess2.SearchMode.ThreadingModeE">
            <summary>Threading mode</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.ThreadingModeE.Off">
            <summary>No threading at all. User interface share the search one.</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.ThreadingModeE.DifferentThreadForSearch">
            <summary>Use a different thread for search and user interface</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.ThreadingModeE.OnePerProcessorForSearch">
            <summary>Use one thread for each processor for search and one for user inetrface</summary>
        </member>
        <member name="T:SrcChess2.SearchMode.RandomModeE">
            <summary>Random mode</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.RandomModeE.Off">
            <summary>No random</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.RandomModeE.OnRepetitive">
            <summary>Use a repetitive random</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.RandomModeE.On">
            <summary>Use random with time seed</summary>
        </member>
        <member name="T:SrcChess2.SearchMode.OptionE">
            <summary>Search options</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.OptionE.UseMinMax">
            <summary>Use MinMax search</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.OptionE.UseAlphaBeta">
            <summary>Use Alpha-Beta prunning function</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.OptionE.UseTransTable">
            <summary>Use transposition table</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.OptionE.UseIterativeDepthSearch">
            <summary>Use iterative depth-first search on a fix ply count</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_book2500">
            <summary>Opening book create using EOL greater than 2500</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_bookUnrated">
            <summary>Opening book create using unrated games</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_boardEvaluationWhite">
            <summary>Board evaluation for the white</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_boardEvaluationBlack">
            <summary>Board evaluation for the black</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_eOption">
            <summary>Search option</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_eThreadingMode">
            <summary>Threading option</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_iSearchDepth">
            <summary>Maximum search depth (or 0 to use iterative deepening depth-first search with time out)</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_iTimeOutInSec">
            <summary>Time out in second if using iterative deepening depth-first search</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_eRandomMode">
            <summary>Random mode</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_bookPlayer">
            <summary>Book to use for player hint</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_bookComputer">
            <summary>Book to use for computer move</summary>
        </member>
        <member name="F:SrcChess2.SearchMode.m_iTransTableEntryCount">
            <summary>Numbers of entry in the translation table if any</summary>
        </member>
        <member name="M:SrcChess2.SearchMode.ReadBook(System.String)">
            <summary>
            Try to read a book from a file or resource if file is not found
            </summary>
            <param name="strBookName">  Book name</param>
            <returns>
            Book
            </returns>
        </member>
        <member name="M:SrcChess2.SearchMode.#cctor">
            <summary>
            Static Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.SearchMode.#ctor(SrcChess2.IBoardEvaluation,SrcChess2.IBoardEvaluation,SrcChess2.SearchMode.OptionE,SrcChess2.SearchMode.ThreadingModeE,System.Int32,System.Int32,SrcChess2.SearchMode.RandomModeE,SrcChess2.Book,SrcChess2.Book,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="boardEvalWhite">           Board evaluation for white player</param>
            <param name="boardEvalBlack">           Board evaluation for black player</param>
            <param name="eOption">                  Search options</param>
            <param name="eThreadingMode">           Threading mode</param>
            <param name="iSearchDepth">             Search depth</param>
            <param name="iTimeOutInSec">            Timeout in second</param>
            <param name="eRandomMode">              Random mode</param>
            <param name="bookPlayer">               Book use for player</param>
            <param name="bookComputer">             Book use for human</param>
            <param name="iTransTableEntryCount">    Translation table entry count</param>
        </member>
        <member name="P:SrcChess2.SearchMode.Book2500">
            <summary>
            Book builds from games of player having ELO greater or equal to 2500
            </summary>
        </member>
        <member name="P:SrcChess2.SearchMode.BookUnrated">
            <summary>
            Book builds from games of unrated player
            </summary>
        </member>
        <member name="M:SrcChess2.SearchMode.HumanSearchMode">
            <summary>
            Gets human search mode
            </summary>
            <returns>
            Search mode
            </returns>
        </member>
        <member name="T:SrcChess2.SettingSearchMode">
            <summary>
            Global search mode setting. Keep the value of manual setting even if hard coded one is used
            </summary>
        </member>
        <member name="T:SrcChess2.SettingSearchMode.BookModeE">
            <summary>Opening book used by the computer</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.BookModeE.NoBook">
            <summary>No opening book</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.BookModeE.Unrated">
            <summary>Use a book built from unrated games</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.BookModeE.ELOGT2500">
            <summary>Use a book built from games by player with ELO greater then 2500</summary>
        </member>
        <member name="T:SrcChess2.SettingSearchMode.DifficultyLevelE">
            <summary>Difficulty level</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.Manual">
            <summary>Manual</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.VeryEasy">
            <summary>Very easy: 2 ply, (no book, weak board evaluation for computer)</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.Easy">
            <summary>Easy: 2 ply, (no book, normal board evaluation for computer)</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.Intermediate">
            <summary>Intermediate: 4 ply, (unrated book, normal board evaluation for computer)</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.Hard">
            <summary>Hard: 4 ply, (ELO 2500 book, normal board evaluation for computer)</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.DifficultyLevelE.VeryHard">
            <summary>Hard: 6 ply, (ELO 2500 book, normal board evaluation for computer)</summary>
        </member>
        <member name="T:SrcChess2.SettingSearchMode.EvaluationModeE">
            <summary>Evaluation method to be used</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.EvaluationModeE.Weak">
            <summary>Weak evaluation method to be used for very easy game</summary>
        </member>
        <member name="F:SrcChess2.SettingSearchMode.EvaluationModeE.Basic">
            <summary>Weak evaluation method to be used for everything but very easy game</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.DifficultyLevel">
            <summary>Difficulty level</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.BookMode">
            <summary>Board evaluation for the white</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.Option">
            <summary>Search option</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.ThreadingMode">
            <summary>Threading option</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.SearchDepth">
            <summary>Maximum search depth (or 0 to use iterative deepening depth-first search with time out)</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.TimeOutInSec">
            <summary>Time out in second if using iterative deepening depth-first search</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.RandomMode">
            <summary>Random mode</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.WhiteBoardEvaluation">
            <summary>Board evaluation method for white player</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.BlackBoardEvaluation">
            <summary>Board evaluation method for black player</summary>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.TransTableEntryCount">
            <summary>Number of entries in the translation table</summary>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.#ctor(SrcChess2.SettingSearchMode.DifficultyLevelE,SrcChess2.IBoardEvaluation,SrcChess2.IBoardEvaluation,SrcChess2.SearchMode.OptionE,SrcChess2.SearchMode.ThreadingModeE,System.Int32,System.Int32,SrcChess2.SearchMode.RandomModeE,SrcChess2.SettingSearchMode.BookModeE)">
            <summary>
            Ctor
            </summary>
            <param name="eDifficultyLevel"> Difficulty level</param>
            <param name="boardEvalWhite">   Board evaluation for white player</param>
            <param name="boardEvalBlack">   Board evaluation for black player</param>
            <param name="eOption">          Search options</param>
            <param name="eThreadingMode">   Threading mode</param>
            <param name="iSearchDepth">     Search depth</param>
            <param name="iTimeOutInSec">    Timeout in second</param>
            <param name="eRandomMode">      Random mode</param>
            <param name="eBookMode">        Book mode</param>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.#ctor(SrcChess2.SettingSearchMode.DifficultyLevelE)">
            <summary>
            Ctor
            </summary>
            <param name="eDifficultyLevel"> Difficuly level</param>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.ModeTooltip(SrcChess2.SettingSearchMode.DifficultyLevelE)">
            <summary>
            Gets the mode tooltip description
            </summary>
            <param name="eLevel">   Difficulty level</param>
        </member>
        <member name="P:SrcChess2.SettingSearchMode.ActiveComputerBookMode">
            <summary>
            Gets the active computer book mode
            </summary>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.GetSearchMode">
            <summary>
            Gets the search mode from the setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.SettingSearchMode.HumanSearchMode">
            <summary>
            Convert the search setting to a human form
            </summary>
            <returns>
            Search mode description
            </returns>
        </member>
        <member name="T:SrcChess2.SettingAdaptor">
            <summary>
            Transfer object setting from/to the properties setting
            </summary>
        </member>
        <member name="F:SrcChess2.SettingAdaptor.m_settings">
            <summary>Properties setting</summary>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.#ctor(SrcChess2.Properties.Settings)">
            <summary>
            Ctor
            </summary>
            <param name="settings"> Properties setting</param>
        </member>
        <member name="P:SrcChess2.SettingAdaptor.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.NameToColor(System.String)">
            <summary>
            Convert a color name to a color
            </summary>
            <param name="strName">  Name of the color or hexa representation of the color</param>
            <returns>
            Color
            </returns>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadFICSConnectionSetting(SrcChess2.FICSInterface.FICSConnectionSetting)">
            <summary>
            Load the FICS connection setting from the properties setting
            </summary>
            <param name="ficsSetting">  FICS connection setting</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveFICSConnectionSetting(SrcChess2.FICSInterface.FICSConnectionSetting)">
            <summary>
            Save the connection settings to the property setting
            </summary>
            <param name="ficsSetting">  Copy the FICS connection setting to the properties setting</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadChessBoardCtl(SrcChess2.ChessBoardControl)">
            <summary>
            Load the chess board control settings from the property setting
            </summary>
            <param name="chessCtl"> Chess board control</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveChessBoardCtl(SrcChess2.ChessBoardControl)">
            <summary>
            Save the chess board control settings to the property setting
            </summary>
            <param name="chessCtl"> Chess board control</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadMainWindow(SrcChess2.MainWindow,System.Collections.Generic.SortedList{System.String,SrcChess2.PieceSet})">
            <summary>
            Load main window settings from the property setting
            </summary>
            <param name="mainWnd"> Main window</param>
            <param name="listPieceSet"> List of available piece sets</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveMainWindow(SrcChess2.MainWindow)">
            <summary>
            Save main window settings from the property setting
            </summary>
            <param name="mainWnd"> Main window</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.FromChessBoardCtl(SrcChess2.ChessBoardControl)">
            <summary>
            Save the chess board control settings to the property setting
            </summary>
            <param name="chessCtl"> Chess board control</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadSearchMode(SrcChess2.BoardEvaluationUtil,SrcChess2.SettingSearchMode)">
            <summary>
            Load search setting from property settings
            </summary>
            <param name="boardEvalUtil">Board evaluation utility</param>
            <param name="searchMode">   Search mode setting</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveSearchMode(SrcChess2.SettingSearchMode)">
            <summary>
            Save the search mode to properties setting
            </summary>
            <param name="searchMode">   Search mode</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadMoveViewer(SrcChess2.MoveViewer)">
            <summary>
            Load move viewer setting from properties setting
            </summary>
            <param name="moveViewer">   Move viewer</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveMoveViewer(SrcChess2.MoveViewer)">
            <summary>
            Save move viewer setting to properties setting
            </summary>
            <param name="moveViewer">   Move viewer</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.LoadFICSSearchCriteria(SrcChess2.FICSInterface.SearchCriteria)">
            <summary>
            Load FICS search criteria from properties setting
            </summary>
            <param name="searchCriteria">   Search criteria</param>
        </member>
        <member name="M:SrcChess2.SettingAdaptor.SaveFICSSearchCriteria(SrcChess2.FICSInterface.SearchCriteria)">
            <summary>
            Save FICS search criteria to properties setting
            </summary>
            <param name="searchCriteria">   Search criteria</param>
        </member>
        <member name="T:SrcChess2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SrcChess2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SrcChess2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SrcChess2.Properties.Resources.ColorSwatchCircle">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:SrcChess2.TransEntryTypeE">
            <summary>Type of transposition entry</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Exact">
            <summary>Exact move value</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Alpha">
            <summary>Alpha cut off value</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Beta">
            <summary>Beta cut off value</summary>
        </member>
        <member name="T:SrcChess2.TransTable">
            <summary>
            Implements a transposition table. Transposition table is used to cache already computed board 
            </summary>
        </member>
        <member name="T:SrcChess2.TransTable.TransEntry">
            <summary>Entry in the transposition table</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_lock">
            <summary>Locking object</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_arrTransEntry">
            <summary>Hashlist of entries</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_lCacheHit">
            <summary>Number of cache hit</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_iGen">
            <summary>Current generation</summary>
        </member>
        <member name="M:SrcChess2.TransTable.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="iEntryCount">  Entry count</param>
        </member>
        <member name="P:SrcChess2.TransTable.EntryCount">
            <summary>
            Size of the translation table
            </summary>
        </member>
        <member name="M:SrcChess2.TransTable.GetEntryPos(System.Int64)">
            <summary>
            Gets the entry position for the specified key
            </summary>
            <param name="zobristKey"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.TransTable.RecordEntry(System.Int64,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32,System.Int32,SrcChess2.TransEntryTypeE)">
            <summary>
            Record a new entry in the table
            </summary>
            <param name="i64ZobristKey">    Zobrist key. Probably unique for this board position.</param>
            <param name="eExtraInfo">       Extra information about the board not contains in the Zobrist key</param>
            <param name="iDepth">           Current depth (reverse)</param>
            <param name="iValue">           Board evaluation</param>
            <param name="eType">            Type of the entry</param>
        </member>
        <member name="M:SrcChess2.TransTable.ProbeEntry(System.Int64,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32,System.Int32,System.Int32)">
            <summary>
            Try to find if the current board has already been evaluated
            </summary>
            <param name="i64ZobristKey">    Zobrist key. Probably unique for this board position.</param>
            <param name="eExtraInfo">       Extra information about the board not contains in the Zobrist key</param>
            <param name="iDepth">           Current depth (reverse)</param>
            <param name="iAlpha">           Alpha cut off</param>
            <param name="iBeta">            Beta cut off</param>
            <returns>
            Int32.MaxValue if no valid value found, else value of the board.
            </returns>
        </member>
        <member name="P:SrcChess2.TransTable.CacheHit">
            <summary>
            Number of cache hit
            </summary>
        </member>
        <member name="M:SrcChess2.TransTable.Reset">
            <summary>
            Reset the cache
            </summary>
        </member>
        <member name="T:SrcChess2.frmCreatingBookFromPGN">
            <summary>
            Interaction logic for wndPGNParsing.xaml
            </summary>
            <summary>
            frmCreatingBookFromPGN
            </summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_task">
            <summary>Task used to process the file</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_arrFileNames">
            <summary>Array of file names</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_iTotalSkipped">
            <summary>Total skipped games</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_iTotalTruncated">
            <summary>Total truncated games</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_strError">
            <summary>Error if any</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_ePhase">
            <summary>Actual phase</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_bResult">
            <summary>Book creation result</summary>
        </member>
        <member name="F:SrcChess2.frmCreatingBookFromPGN.m_listMoveList">
            <summary>List of moves for all games</summary>
        </member>
        <member name="T:SrcChess2.frmCreatingBookFromPGN.delProgressCallBack">
            <summary>Private delegate</summary>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.#ctor(System.String[])">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.WndPGNParsing_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the windows is loaded
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.WndPGNParsing_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the windows is closing
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.TotalSkipped">
            <summary>
            Total number of games skipped
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.TotalTruncated">
            <summary>
            Total number of games truncated
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.Error">
            <summary>
            Error if any
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.Book">
            <summary>
            Created openning book
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.BookEntryCount">
            <summary>
            Number of entries in the book
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatingBookFromPGN.ListMoveList">
            <summary>
            List of moves of all games
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.butCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel the parsing job
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.WndCallBack(SrcChess2.PgnParser.ParsingPhaseE,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Progress bar
            </summary>
            <param name="ePhase">       Phase</param>
            <param name="iFileIndex">   File index</param>
            <param name="iFileCount">   File count</param>
            <param name="strFileName">  File name</param>
            <param name="iGameDone">    Games processed since the last call</param>
            <param name="iGameCount">   Game count</param>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.ProgressCallBack(System.Object,SrcChess2.PgnParser.ParsingPhaseE,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Progress bar
            </summary>
            <param name="cookie">           Cookie</param>
            <param name="ePhase">           Phase</param>
            <param name="iFileIndex">       File index</param>
            <param name="iFileCount">       File count</param>
            <param name="strFileName">      File name</param>
            <param name="iGameProcessed">   Games processed since the last call</param>
            <param name="iGameCount">       Game count</param>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.CreateBook">
            <summary>
            Create a book from a list of PGN games
            </summary>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.frmCreatingBookFromPGN.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ZobristKey">
            <summary>
            Zobrist key implementation.
            </summary>
        </member>
        <member name="F:SrcChess2.ZobristKey.s_pi64RndTable">
            <summary>Random value for each piece/position</summary>
        </member>
        <member name="M:SrcChess2.ZobristKey.#cctor">
            <summary>
            Static constructor. Use to create the random value for each case of the board.
            </summary>
        </member>
        <member name="M:SrcChess2.ZobristKey.UpdateZobristKey(System.Int64,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the Zobrist key using the specified move
            </summary>
            <param name="i64ZobristKey">Zobrist key</param>
            <param name="iPos">         Piece position</param>
            <param name="eOldPiece">    Old value</param>
            <param name="eNewPiece">    New value</param>
        </member>
        <member name="M:SrcChess2.ZobristKey.UpdateZobristKey(System.Int64,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the Zobrist key using the specified move
            </summary>
            <param name="i64ZobristKey">Zobrist key</param>
            <param name="iPos1">        Piece position</param>
            <param name="eOldPiece1">   Old value</param>
            <param name="eNewPiece1">   New value</param>
            <param name="iPos2">        Piece position</param>
            <param name="eOldPiece2">   Old value</param>
            <param name="eNewPiece2">   New value</param>
        </member>
        <member name="M:SrcChess2.ZobristKey.ComputeBoardZobristKey(SrcChess2.ChessBoard.PieceE[])">
            <summary>
            Compute the zobrist key for a board
            </summary>
            <param name="peBoard">      Board</param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
